[{"path":"/articles/ggOceanMaps.html","id":"basic-use","dir":"Articles","previous_headings":"","what":"Basic use","title":"ggOceanMaps User Manual","text":"ggOceanMaps extends ggplot2. Data contain geographic information can plotted maps generated ggOceanMaps using ggplot2 layers separated + operator. package uses spatial shapefiles, GIS packages R manipulate, ggspatial package help plot shapefiles. shapefile plotting conducted internally basemap function uses ggplot’s sf object plotting capabilities. primary aim ggOceanMaps make plotting oceanographic spatial data simple feasible, also flexible custom modifications. “simple feasible” part covered section, “flexible custom modifications” part covered Advanced use section. basic use section tutorial assumes user knows use ggplot. familiar package, may read Data visualization section Hadley Wickham & Garrett Grolemund. tutorial describe functions ggOceanMaps rather focusses use . Make sure refer function documentation reading tutorial. package requires ggOceanMapsData package available CRAN installed automatically load ggOceanMaps first time. automatic installation work, please use: packages installed, can load normally:","code":"install.packages(\"ggOceanMapsData\", repos = c(\"https://mikkovihtakari.github.io/drat\", \"https://cloud.r-project.org\")) library(ggOceanMapsData) library(ggOceanMaps)"},{"path":"/articles/ggOceanMaps.html","id":"limits","dir":"Articles","previous_headings":"Basic use","what":"Limits","title":"ggOceanMaps User Manual","text":"ensure simplicity, ggOceanMaps package attempts use decimal degree coordinate system much possible. system represents coordinates sphere, maps plotted two dimensions. Therefore, underlying map data projected using different mathematical algorithms depending geographic location. simplest way defining geographic location use limits argument decimal degrees. limits argument can defined either numeric vector length 1 4. Specifying argument single integer 30 88 -88 -30 plots polar stereographic map Arctic Antarctic, respectively.  Rectangular maps plotted specifying limits argument numeric vector length 4 first element defines start longitude, second element end longitude, third element minimum latitude fourth element maximum latitude bounding box:  Limiting maps using decimal degrees somewhat counter-intuitive maps plotted polar regions (>= 60 <= -60 latitude) actually projected Arctic Antarctic polar stereographic systems. decimal degrees angular units running counter-clockwise, also longitude limits defined counter-clockwise. Projected maps decimal degree limits lead expanded limits towards poles using Arctic Atlantic Polar Stereographic projections decimal degrees represent sphere:  figure : Limiting rectangular basemaps done placing four coordinates limit argument. ) limits decimal degrees, longitude limits ([1:2]) specify start end segments corresponding angular lines reside inside map area. longitude limits defined counter-clockwise. latitude limits [3:4] define parallels reside inside limited region given longitude segments. Note resulting limited region (polygon thick red borders) becomes wider polygon defined coordinates (thin red borders). example limits c(120, -120, 60, 80). B) limits given projected coordinates decimal degrees maps |latitude| < 60, limits elements represent lines encompassing map area cartesian space. example limits limits ) projected Arctic stereographic (crs = 3995). limiting basemaps using data, limits calculated maximum reach projected coordinates B added buffer place points inside map area. example:  Exact control map limits can difficult using decimal degree limits polar regions. limits argument also allows specifying limits underlying projected coordinate units. First, need find units look like:  projection.grid argument plots grid using projected actual map coordinates instead decimal degrees. grid helps defining limits using projected coordinates giving better control map limits decimal degree coordinates. automatic shapefile definition algorithm work projected coordinates. Therefore, limits given decimal degrees (longitude outside range [-180, 180] latitude [-90, 90]), function asks specify shapefiles. shapefiles can defined partially matching names pre-made shapefiles shapefile_list (e.g. “Ar” enough “ArcticStereographic”):","code":"library(ggOceanMaps) basemap(limits = 60) # A synonym: basemap(60) basemap(limits = c(-20, 20, 40, 59)) dt <- data.frame(lon = c(160, 160, -160, -160), lat = c(60, 80, 80, 60))  basemap(limits = c(160, -160, 60, 80)) +   geom_spatial_polygon(data = dt, aes(x = lon, y = lat), fill = NA, color = \"red\") basemap(limits = 60, projection.grid = TRUE, grid.col = \"red\") basemap(limits = c(-2e6, 1e6, 0, 3e6), shapefiles = \"Arctic\")"},{"path":"/articles/ggOceanMaps.html","id":"data-limits","dir":"Articles","previous_headings":"Basic use","what":"Data limits","title":"ggOceanMaps User Manual","text":"limits map can also defined inputting data frame data argument. limits automatically defined allowing user quickly find limits desired spatial dataset:  Note function expands map make data fit inside map area compared similar plot using limits argument . function automatically detects columns containing longitude latitude information. automatic detection algorithm advanced recommended use intuitive column names longitude (“lon”, “long”, “longitude”) latitude (“lat”, “latitude”) columns. coordinate data given decimal degrees data argument function.","code":"dt <- expand.grid(lon = c(160, -160), lat = c(60, 80))  basemap(data = dt) + # a synonym: basemap(dt)   geom_spatial_point(data = dt, aes(x = lon, y = lat), color = \"red\")"},{"path":"/articles/ggOceanMaps.html","id":"bathymetry-and-glaciers","dir":"Articles","previous_headings":"Basic use","what":"Bathymetry and glaciers","title":"ggOceanMaps User Manual","text":"advised limit map first plot bathymetry glaciers save processing time computer (bathymetry shapes can large). Bathymetry plotted simply specifying bathymetry = TRUE:  Glaciers can plotted using glaciers argument:","code":"basemap(limits = c(100, 160, -20, 30), bathymetry = TRUE) basemap(limits = 60, glaciers = TRUE, bathymetry = TRUE)"},{"path":"/articles/ggOceanMaps.html","id":"adding-data-to-maps","dir":"Articles","previous_headings":"Basic use","what":"Adding data to maps","title":"ggOceanMaps User Manual","text":"basemap(...) function works almost similarly ggplot(...) function base adding layers plot. difference basemap() ggplot() basemap() plot already contains multiple ggplot layers. layers except bathymetry aes mapping x, y group. Bathymetry mapped fill color color addition. means add ggplot layers, need specify data argument explicitly shown . Another difference basemaps plotted using projected coordinates. ggspatial ggplot’s geom_sf functions convert coordinates automatically projected coordinates:  ggplot functions can also used, coordinates need transformed basemap projection first using transform_coord function:  Note maps plotted temperate tropical regions projected. Consequently, decimal degrees work maps directly:  transform_coord function detects projection automatically, given map limited using similar range coordinates. Therefore can use transform_coord demonstrated whenever using standard ggplot layers.","code":"dt <- data.frame(lon = c(seq(-180, 0, 30), seq(30, 180, 30)), lat = -70) basemap(limits = -60, glaciers = TRUE) + geom_spatial_point(data = dt, aes(x = lon, y = lat), color = \"red\") basemap(limits = -60, glaciers = TRUE) +    geom_point(data = transform_coord(dt), aes(x = lon, y = lat), color = \"red\") dt <- data.frame(lon = c(-100, -80, -60), lat = c(10, 25, 40), var = c(\"a\", \"a\", \"b\")) basemap(data = dt) + geom_point(data = dt, aes(x = lon, y = lat), color = \"red\") transform_coord(data.frame(lon = -80, lat = 25), bind = TRUE) #>   lon lat lon.proj lat.proj #> 1 -80  25      -80       25"},{"path":"/articles/ggOceanMaps.html","id":"rotating-maps","dir":"Articles","previous_headings":"Basic use","what":"Rotating maps","title":"ggOceanMaps User Manual","text":"stereographic maps can rotated point towards north using rotate argument:  word warning, however: rotation involves reprojecting shapefiles entirety memory consuming especially large bathymetry shapes. Make sure limit map correctly add bathymetry. rotation still experimental work limits defined using projected coordinates data. functionality likely contain whole lot bugs. Rotation currently work within transform_coord() function. Use ggspatial::geom_spatial_* functions adding data rotated maps.","code":"basemap(limits = c(-160, -80, 60, 85), rotate = TRUE)"},{"path":"/articles/ggOceanMaps.html","id":"quick-map","dir":"Articles","previous_headings":"Basic use","what":"Quick map","title":"ggOceanMaps User Manual","text":"qmap function designed shortcut quickly take look spatial dataset similar ggplot’s qplot function. function supposed automatically detect type data fed function plot map using appropriate geometries, limits, projection. can use expand.factor argument adjust automatic zoom data. Note large expand.factor values lead errors.","code":"dt <- data.frame(lon = c(-100, -80, -60), lat = c(10, 25, 40), var = c(\"a\", \"a\", \"b\")) qmap(dt, color = I(\"red\")) # set color qmap(dt, color = var, expand.factor = 1.3) # map color, zoom out"},{"path":"/articles/ggOceanMaps.html","id":"detailed-maps","dir":"Articles","previous_headings":"Basic use","what":"Detailed maps","title":"ggOceanMaps User Manual","text":"Detailed shapefiles stored ggOceanMapsLargeData repository downloaded needed. Available shapefiles can viewed using shapefile_list() function. Plotting shapefiles list done shapes. Note projection shapefiles varies.  Svalbard map PlotSvalbard package: PlotSvalbard maps can also generated using ggOceanMaps ggOceanMapsLargeData extension. function asks download data use first time. Kongsfjorden PlotSvalbard package:","code":"shapefile_list(\"all\") #>                     name                            land #> 1    ArcticStereographic    ggOceanMapsData::arctic_land #> 2 AntarcticStereographic ggOceanMapsData::antarctic_land #> 3          DecimalDegree        ggOceanMapsData::dd_land #> 4               Svalbard                   svalbard_land #> 5             BarentsSea                 barentssea_land #> 6                  IBCAO    ggOceanMapsData::arctic_land #>                              glacier                            bathy   crs #> 1    ggOceanMapsData::arctic_glacier    ggOceanMapsData::arctic_bathy  3995 #> 2 ggOceanMapsData::antarctic_glacier ggOceanMapsData::antarctic_bathy  3031 #> 3        ggOceanMapsData::dd_glacier        ggOceanMapsData::dd_bathy  4326 #> 4                   svalbard_glacier                   svalbard_bathy 32633 #> 5                 barentssea_glacier                 barentssea_bathy 32636 #> 6    ggOceanMapsData::arctic_glacier                      ibcao_bathy  3995 #>                                                                                     path #> 1                                                                                   <NA> #> 2                                                                                   <NA> #> 3                                                                                   <NA> #> 4    https://github.com/MikkoVihtakari/ggOceanMapsLargeData/raw/master/data/svalbard.rda #> 5  https://github.com/MikkoVihtakari/ggOceanMapsLargeData/raw/master/data/barentssea.rda #> 6 https://github.com/MikkoVihtakari/ggOceanMapsLargeData/raw/master/data/ibcao_bathy.rda basemap(shapefiles = \"BarentsSea\", bathymetry = TRUE) basemap(shapefiles = \"Svalbard\", glaciers = TRUE) basemap(limits = c(10.9, 12.65, 78.83, 79.12),          bathymetry = TRUE, shapefiles = \"Svalbard\",         legends = FALSE, glaciers = TRUE)"},{"path":"/articles/ggOceanMaps.html","id":"advanced-use","dir":"Articles","previous_headings":"","what":"Advanced use","title":"ggOceanMaps User Manual","text":"section focuses flexibility user modifications. assumed advanced users understand basics geographic information systems (GIS) use systems R (e.g. see Making Maps R chapter Lovelace et al. 2020).","code":""},{"path":"/articles/ggOceanMaps.html","id":"projections","dir":"Articles","previous_headings":"Advanced use","what":"Projections","title":"ggOceanMaps User Manual","text":"basemap function uses limits argument automatically detect required projection map (data argument calculate limits). algorithms deciding projection use defined define_shapefiles shapefile_list functions. conditions expected change development package documented information basemap function might outdated. Make sure check projection definition functions --date information. time writing, function uses three different projections (given EPSG codes): 3995 WGS 84 / Arctic Polar Stereographic. Called “ArcticStereographic”. max latitude (limits[4]) >= 60 (min latitude (limits[3]) >= 30), single integer latitudes >= 30 <= 89. 3031 WGS 84 / Antarctic Polar Stereographic. Called “AntarcticStereographic”. max latitude (limits[4]) <= -60 (min latitude (limits[3]) <= -30), single integer latitudes <= -30 >= -89. 4326 WGS 84 / World Geodetic System 1984, used GPS. Called “DecimalDegree”. min latitude (limits[3]) < 30 > -30, max latitude (limits[4]) < 60 > -60, single integer latitudes < 30 > -30. basemap function uses pre-transformed shapefiles projections (defined shapefile_list). make plotting quicker memory efficient leads larger data size required package.","code":""},{"path":[]},{"path":"/articles/ggOceanMaps.html","id":"bathymetry-styles","dir":"Articles","previous_headings":"Advanced use > Appearance","what":"Bathymetry styles","title":"ggOceanMaps User Manual","text":"basemap function contains four pre-made bathymetry styles defined using bathy.style argument. Two alternatives (\"poly_*\") mapped fill using geom_polygon function, two others (contour_*) mapped color. default style (\"poly_blues\") displayed throughout user manual. styles :","code":"basemap(limits = c(0, 46, 70, 81), bathymetry = TRUE, bathy.style = \"poly_greys\") basemap(limits = c(0, 46, 70, 81), bathymetry = TRUE, bathy.style = \"contour_blues\") basemap(limits = c(0, 46, 70, 81), bathymetry = TRUE, bathy.style = \"contour_grey\")"},{"path":"/articles/ggOceanMaps.html","id":"customizing-bathymetry-styles","dir":"Articles","previous_headings":"Advanced use > Appearance > Bathymetry styles","what":"Customizing bathymetry styles","title":"ggOceanMaps User Manual","text":"bathy.style = \"poly_*\" bathymetry polygons mapped geom_fill_discrete can modifying using standard ggplot syntax:  bathy.style = \"contour_*\" bathymetry lines mapped geom_color_discrete can modifying using standard ggplot syntax:","code":"basemap(limits = c(-140, -105, 20, 40), bathymetry = TRUE) +    scale_fill_viridis_d(\"Water depth (m)\") basemap(limits = c(0, 60, 68, 80), bathymetry = TRUE, bathy.style = \"contour_blues\") +    scale_color_hue()"},{"path":"/articles/ggOceanMaps.html","id":"graphical-parameters","dir":"Articles","previous_headings":"Advanced use > Appearance","what":"Graphical parameters","title":"ggOceanMaps User Manual","text":"basemap function uses graphical parameters (objectively) happen please eye author worked applications needed author. default parameters may suddenly change without warning. may want modify appearances basemap liking. can done using *.col (fill), *.border.col (line color) *.size (line width) arguments:  Graticules (grid lines) can removed setting grid.col NA. Axis labels can manipulated using standard ggplot code:","code":"basemap(limits = c(-20, 30, 55, 70), glaciers = TRUE,          bathymetry = TRUE, bathy.style = \"poly_greys\",         land.col = \"#eeeac4\", gla.col = \"cadetblue\",          land.border.col = NA, gla.border.col = NA,         grid.size = 0.05) basemap(limits = c(124, 148, 31, 50), grid.col = NA) +    labs(x = NULL, y = \"Only latitude for you, ...\")"},{"path":"/articles/ggOceanMaps.html","id":"add-scale-bar-and-north-arrow","dir":"Articles","previous_headings":"Advanced use > Appearance","what":"Add scale bar and north arrow","title":"ggOceanMaps User Manual","text":"Scale bar north arrows can added using ggspatial functions (package automatically loaded use ggOceanMaps):  Note north arrow example points towards North placed direction North varies shown meridians. scale bar correct 71 \\(\\circ\\)N latitude specified projection (crs = 3995) Arctic stereographic maps.","code":"basemap(limits = c(-75, -45, 62, 78), rotate = TRUE) +    annotation_scale(location = \"br\") +    annotation_north_arrow(location = \"tr\", which_north = \"true\")"},{"path":"/articles/ggOceanMaps.html","id":"modifying-basemap-objects","dir":"Articles","previous_headings":"Advanced use","what":"Modifying basemap objects","title":"ggOceanMaps User Manual","text":"objects produced basemap function standard ggplot objects difference relevant information used mapping added attributes object: Accessing attributes allow custom modifications maps produced basemap function. See Reordering layers section example.","code":"p <- basemap(-60) names(attributes(p)) #> [1] \"names\"      \"class\"      \"bathymetry\" \"glaciers\"   \"limits\"     #> [6] \"polarmap\"   \"map.grid\"   \"crs\"        \"proj\""},{"path":"/articles/ggOceanMaps.html","id":"reordering-layers","dir":"Articles","previous_headings":"Advanced use > Modifying basemap objects","what":"Reordering layers","title":"ggOceanMaps User Manual","text":"Sometimes need move land, glacier, grid layers top spatial data added basemap. can done using reorder_layers function. example uses Norwegian fishing regions (Hovedområder f.o.m. 2018), can downloaded Norwegian Directorate Fisheries data portal (use “ESRI shapefile” option). example works spatial polygons crs information, however. Norwegian fishing regions included example dataset ggOceanMaps package. can download data use rgdal::readOGR function read shapefile wish follow example fully.  initial plot draws polygons. Note add coord_sf(expand = FALSE) layer_spatial annotation_spatial functions ggspatial package seem modify coord_sf added plot. basemap function uses expand = FALSE (run script without addition see difference). Note also polygon boundaries partly land. want eventually hide land. also add region labels color polygons based area demonstrate capabilities ggplot, ggspatial ggOceanMaps:  Ideally, region labels go land. can fixed plotting labels top reordered ggplot object. demonstrate reorder layers, manually :","code":"data(fishingAreasNor, package = \"ggOceanMapsData\")  basemap(fishingAreasNor) +    annotation_spatial(fishingAreasNor, fill = NA) +    coord_sf(expand = FALSE) # required to keep the limits labels <- suppressWarnings(sf::st_centroid(fishingAreasNor)) fishingAreasNor$area <- as.numeric(sf::st_area(fishingAreasNor))/1e9 # calculate area in 1000 km2  p <- basemap(fishingAreasNor) +   geom_sf(data = fishingAreasNor, aes(fill = area)) +   geom_sf_text(data = labels, aes(label = FID), size = FS(8), fontface = 2) +   scale_fill_distiller(name = \"Area\\n(1000 km2)\",                        palette = \"Spectral\", na.value = \"white\",                        limits = c(0, 500), oob = scales::squish)  reorder_layers(p) p <- reorder_layers(p) tmp <- sapply(p$layers, function(k) !is.null(k$mapping$label)) # the layer with label mapping p$layers <- c(p$layers[-which(tmp)], p$layers[which(tmp)]) p"},{"path":"/articles/ggOceanMaps.html","id":"contolling-the-plotting-order-of-graticules","dir":"Articles","previous_headings":"Advanced use > Modifying basemap objects","what":"Contolling the plotting order of graticules","title":"ggOceanMaps User Manual","text":"Graticules plotted using ggplot2::coord_sf() regarded panel element ggplot2::theme(). Note also background color included panel element (see next section). ggOceanMaps::theme_map() function, automatically executed together every basemap() qmap() command, controls position graticules set top default:  move graticules layers, use panel.ontop argument ggplot2::theme():  Sometimes need control position graticules layers. time writing, ggplot offer straightforward way , can use code ggplot2::coord_sf() make graticules:  exception polar maps graticules drawn ggOceanMaps (ggplot2 graticules maps bugged years ago writing function; part requires revision point).","code":"basemap(limits = c(-20, 15, 50, 70), grid.col = \"red\", grid.size = 1) basemap(limits = c(-20, 15, 50, 70), grid.col = \"red\", grid.size = 1) +    theme(panel.ontop = FALSE) data(ices_areas, package = \"ggOceanMapsData\")  p <- basemap(limits = c(-20, 15, 50, 70), grid.col = NA) + # without graticules    geom_sf(data = ices_areas, aes(fill = SubArea), show.legend = FALSE)   # Make the graticules: lims <- attributes(p)$limits  graticule <- sf::st_graticule(   c(lims[1], lims[3], lims[2], lims[4]),    crs = attributes(p)$proj,   lon = seq(-180, 180, 15), lat = seq(-90, 90, 5))  # Plot reorder_layers(p) +   geom_sf(data = graticule, color = \"grey70\", size = LS(0.5)) + # graticules   coord_sf(xlim = lims[1:2], ylim = lims[3:4], # redefine limits            crs = attributes(p)$proj) +    # labels on top of graticules   geom_sf_label(     data = suppressWarnings(sf::st_centroid(sf::st_make_valid(ices_areas))),      aes(label = Area_Full)   ) X <- basemap_data(60)  basemap(60, grid.col = NA) +   ggspatial::geom_spatial_path(     data = X$map.grid$lon.grid.lines,      aes(x = lon, y = lat),      crs = 4326, color = \"red\", size = 1) +   ggspatial::geom_spatial_path(     data = X$map.grid$lat.grid.lines,      aes(x = lon, y = lat),      crs = 4326,      color = \"red\", size = 1) +   ggspatial::layer_spatial(     data = X$shapefiles$land,      fill = \"grey60\", color = \"black\", size = 0.1)"},{"path":"/articles/ggOceanMaps.html","id":"coloring-the-ocean-background","dir":"Articles","previous_headings":"Advanced use > Modifying basemap objects","what":"Coloring the ocean (background)","title":"ggOceanMaps User Manual","text":"Similarly, ggplot2::theme() panel element allows coloring ocean:  want graticules top, ’ll need define manually , , background grid, contained ggplot element called panel:","code":"basemap(expand.grid(lon = c(-129, -124), lat = c(49, 53)), grid.col = \"red\", grid.size = 0.5) +    theme(panel.background = element_rect(fill = \"lightblue\"),         panel.ontop = FALSE) p <- basemap(expand.grid(lon = c(-129, -124), lat = c(49, 53)), grid.col = NA) +    theme(panel.background = element_rect(fill = \"lightblue\"),         panel.ontop = FALSE)   # Make the graticules: lims <- attributes(p)$limits  graticule <- sf::st_graticule(   c(lims[1], lims[3], lims[2], lims[4]),    crs = attributes(p)$proj,   lon = attributes(p)$map.grid$lon.breaks,    lat = attributes(p)$map.grid$lat.breaks )  # Plot p +    geom_sf(data = graticule, color = \"red\", size = LS(1)) + # graticules   coord_sf(xlim = lims[1:2], ylim = lims[3:4], # redefine limits            crs = attributes(p)$proj)"},{"path":"/articles/ggOceanMaps.html","id":"add-a-fill-scale-on-top-of-bathymetry","dir":"Articles","previous_headings":"Advanced use > Modifying basemap objects","what":"Add a fill scale on top of bathymetry","title":"ggOceanMaps User Manual","text":"error comes ggplot allow two color scales similar mapping one plot. issue can evaded using contour bathymetry:  using ggnewscale package make data fill mapping disconnected basemap:","code":"basemap(c(-20, 15, 50, 70), bathymetry = TRUE) +    annotation_spatial(ices_areas, aes(fill = Area_Full)) #> Error in `f()`: # ! Insufficient values in manual scale. 75 needed but only 9 provided. # Run `rlang::last_error()` to see where the error occurred. basemap(c(-20, 15, 50, 70), bathymetry = TRUE,          bathy.style = \"contour_blues\", legends = FALSE) +    annotation_spatial(ices_areas, aes(fill = Area_Full), alpha = 0.4) +    theme(legend.position = \"none\") basemap(limits = c(-20, 15, 50, 70), bathymetry = TRUE,          bathy.style = \"poly_greys\") +   ggnewscale::new_scale_fill() +   annotation_spatial(ices_areas, aes(fill = Area_Full), alpha = 0.4) +    theme(legend.position = \"none\")"},{"path":"/articles/ggOceanMaps.html","id":"custom-shapefiles","dir":"Articles","previous_headings":"Advanced use > Modifying basemap objects","what":"Custom shapefiles","title":"ggOceanMaps User Manual","text":"ggOceanMaps package uses vector (spatial polygon) data make plotting efficient produce sharp images resolution. time , package supports three kinds shapefiles: 1) land shapes, 2) glacier shapes, 3) bathymetry shapes. shapes defined using projection. Since shapefiles large generating may require long processing time, convenient save Rdata file sp::SpatialPolygonsDataFrames objects load memory used make map. Useful sources spatial data : Vector data Natural Earth Data provides polygon data relatively high detail entire Earth. Used data-source land glacier shapes throughout package, except detailed maps. Norwegian Mapping Authority provides high-resolution spatial data mainland Norway Svalbard. Norwegian Polar Institute provides high-resolution vector data Norwegian polar regions. Raster data bathymetry GEBCO Compilation Group (2019) GEBCO 2019 15-arcsecond grid. highest resolution open bathymetry grid available moment. Referred “GEBCO data”. ETOPO1 1 Arc-Minute Global Relief Model. Can also accessed using marmap::getNOAA.bathy (see Section 1). Referred “NOAA data” “ETOPO1 data”. probably sources author needed yet. Please send email add options list. bathymetry datasets large require vectorization can plotted ggplot2 within reasonable time. go plot customized shapefiles Barents Sea example. similar procedure can applied region world.","code":""},{"path":"/articles/ggOceanMaps.html","id":"bathymetries","dir":"Articles","previous_headings":"Advanced use > Modifying basemap objects > Custom shapefiles","what":"Bathymetries","title":"ggOceanMaps User Manual","text":"Natural Earth Data provides bathymetry vector data, can readily used ggOceanMaps. contours dataset , however, practical marine biology fisheries shallow seas Barents Sea. Download ETOPO1 dataset grid registered NetCDF gmt4 folder computer. may beneficial make “GIS” “Shapefiles” folder store similar datasets later use. Whether use ice bed-rock surface matter example glaciers sea-level within region interest. case, choice visual effect land glaciers plotted top bathymetry, ice surface option lead smaller file size. bathymetry needs first reclassified formatted consequent vectorization step. First, need define location ETOPO1 dataset find limits region decimal degrees. limits can found using basemap function. advised use slightly wider limits region interest. also need define appropriate projection. use UTM 36N zone projection, approximately middle area interest. define higher resolution contour depths 0-500 m area interest relatively shallow. raster_bathymetry function relatively slow large data. aggregation.factor argument can used reduce file size influence resolution resulting shapefile (higher factors lead lower resolution). Now bathyRaster object can vectorized: vectorization done using vector_bathymetry function. drop.crumbs remove.holes parameters can used reduce file size, smooth parameter makes contours look smoother high zoom levels. Note smoothing raster cell edges completely arbitrary may lead map contours exist reality.","code":"etopoPath <- \"\" # Replace by the path to the folder where the ETOPO1 grd file is located. lims <- c(-8, 65, 68, 82) projection <- \"EPSG:32636\" basemap(limits = lims) rb <- raster_bathymetry(bathy = paste(etopoPath, \"ETOPO1_Ice_g_gmt4.grd\", sep = \"/\"),                         depths = c(50, 100, 200, 300, 500, 1000, 1500, 2000, 4000, 6000, 10000),                          proj.out = projection,                          boundary = lims ) class(rb) names(rb) raster::plot(rb$raster) bs_bathy <- vector_bathymetry(rb) sp::plot(bs_bathy)"},{"path":"/articles/ggOceanMaps.html","id":"land-shapes","dir":"Articles","previous_headings":"Advanced use > Modifying basemap objects > Custom shapefiles","what":"Land shapes","title":"ggOceanMaps User Manual","text":"Land shapes theoretically defined bathymetry raster (depth = 0). Nevertheless, since 10m Natural Earth Data vectors high resolution, need write function . use Natural Earth Data instead. Download Natural Earth Data Land Minor Islands vectors “GIS” “Shapefiles” folder define folder paths : done, go ahead process shapefiles:","code":"NEDPath <- \"\" # Natural Earth Data location outPath <- \"\" # Data output location world <- rgdal::readOGR(paste(NEDPath, \"ne_10m_land/ne_10m_land.shp\", sep = \"/\")) islands <- rgdal::readOGR(paste(NEDPath, \"ne_10m_minor_islands/ne_10m_minor_islands.shp\", sep = \"/\")) world <- rbind(world, islands)  bs_land <- clip_shapefile(world, lims) bs_land <- sp::spTransform(bs_land, CRSobj = sp::CRS(projection)) rgeos::gIsValid(bs_land) # Has to return TRUE, if not use rgeos::gBuffer bs_land <- rgeos::gBuffer(bs_land, byid = TRUE, width = 0) sp::plot(bs_land)"},{"path":"/articles/ggOceanMaps.html","id":"glacier-shapes","dir":"Articles","previous_headings":"Advanced use > Modifying basemap objects > Custom shapefiles","what":"Glacier shapes","title":"ggOceanMaps User Manual","text":"Download Natural Earth Data Glaciated Areas vectors NEDPath.","code":"glaciers <- rgdal::readOGR(paste(NEDPath, \"ne_10m_glaciated_areas/ne_10m_glaciated_areas.shp\", sep = \"/\")) rgeos::gIsValid(glaciers) # Needs buffering glaciers <- rgeos::gBuffer(glaciers, byid = TRUE, width = 0)  bs_glacier <- clip_shapefile(glaciers, lims) bs_glacier <- sp::spTransform(bs_glacier, CRSobj = sp::CRS(projection)) rgeos::gIsValid(bs_glacier) sp::plot(bs_glacier)"},{"path":"/articles/ggOceanMaps.html","id":"plotting-the-shapefiles-using-basemap","dir":"Articles","previous_headings":"Advanced use > Modifying basemap objects > Custom shapefiles","what":"Plotting the shapefiles using basemap","title":"ggOceanMaps User Manual","text":"Now shapefiles, can save file run script every time plot map using custom shapefiles. shapefiles can now plotted using basemap function:  list elements land, glacier bathy required, glacier bathy can set NULL bathymetry glaciers set FALSE, respectively. means forced define bathymetries glaciers custom shapefile maps plotting desired. Note map becomes plotted outside actual limits. issue hopefully fixed future. map can limited using limits data arguments basemap:","code":"save(bs_bathy, bs_land, bs_glacier, file = paste(outPath, \"bs_shapes.rda\", sep = \"/\"), compress = \"xz\") basemap(shapefiles = list(land = bs_land, glacier = bs_glacier, bathy = bs_bathy), bathymetry = TRUE, glaciers = TRUE) basemap(limits = c(10, 53, 70, 80), shapefiles = list(land = bs_land, glacier = bs_glacier, bathy = bs_bathy), bathymetry = TRUE, glaciers = TRUE)"},{"path":[]},{"path":"/articles/ggOceanMaps.html","id":"antimeridian-date-line-issues","dir":"Articles","previous_headings":"Advanced use > Known issues","what":"Antimeridian (date-line) issues","title":"ggOceanMaps User Manual","text":"decimal degree projection, ggOceanMaps suffers antimeridian issue regions < 30 > -30 latitude. Currently, basemap function plots entire world instead desired region: problem yet solved, projected maps \\(\\geq\\) 30 \\(\\leq\\) -30 can tackle antimeridians:  Note also limiting polar stereographic maps using decimal degree longitude limits[1:2] using equal longitudes decimal degree space (e.g. c(90, 90), c(-180, 180), …) equal limiting map using latitude argument furthest pole. limit points end along single line angular space. function automatically corrects definition error:","code":"basemap(limits = c(160, -160, 0, 30)) # not evaluated basemap(limits = c(160, -160, 30, 60), rotate = TRUE) basemap(limits = c(-180, 180, -70, -60))"},{"path":"/articles/ggOceanMaps.html","id":"citations-and-data-sources","dir":"Articles","previous_headings":"","what":"Citations and data sources","title":"ggOceanMaps User Manual","text":"data used package property Institute Marine Research author package. , therefore, important cite data sources used map generate package. Please see list data sources. Please cite package whenever maps generated package published. --date citation information, please use:","code":"citation(\"ggOceanMaps\") #>  #> To cite package 'ggOceanMaps' in publications use: #>  #>   Vihtakari M (2022). _ggOceanMaps: Plot Data on Oceanographic Maps #>   using 'ggplot2'_. R package version 1.3.0, #>   <https://mikkovihtakari.github.io/ggOceanMaps/>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {ggOceanMaps: Plot Data on Oceanographic Maps using 'ggplot2'}, #>     author = {Mikko Vihtakari}, #>     year = {2022}, #>     note = {R package version 1.3.0}, #>     url = {https://mikkovihtakari.github.io/ggOceanMaps/}, #>   }"},{"path":"/articles/poster.html","id":"the-poster","dir":"Articles","previous_headings":"","what":"The poster","title":"SI2022 poster","text":"Click picture download pdf poster embedded links.","code":""},{"path":"/articles/poster.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"SI2022 poster","text":"numbered references poster: Vihtakari, M. ggOceanMaps: Plot Data Oceanographic Maps using ggplot2. R package version 1.3. (2022). https://mikkovihtakari.github.io/ggOceanMaps/ R Core Team. R: Language Environment Statistical Computing. Version 4.2. R Foundation Statistical Computing, Vienna, Austria. (2022). https://www.r-project.org/ Wickham, H. ggplot2: Elegant Graphics Data Analysis. (Springer-Verlag New York, 2016). https://ggplot2.tidyverse.org/ Pebesma, E. Simple Features R: Standardized Support Spatial Vector Data. R Journal 10, 439 (2018). https://edzer.github.io/sp/ Pebesma, E. J. & Bivand, R. S. Classes methods spatial data R. R News 5, 9–13 (2005). https://r-spatial.github.io/sf/ Amante, C. & Eakins, B. W. ETOPO1 1 Arc-Minute Global Relief Model: Procedures, Data Sources Analysis. NOAA Technical Memorandum NESDIS NGDC-24. https://www.doi.org/10.7289/V5C8276M GEBCO. GEBCO Digital Atlas published British Oceanographic Data Centre behalf IOC IHO. (2003). https://www.gebco.net/data_and_products/gridded_bathymetry_data/ Natural Earth Data. https://www.naturalearthdata.com/ Dunnington, D. ggspatial: Spatial Data Framework ggplot2. R package version 1.1.6. (2022). https://paleolimbot.github.io/ggspatial/","code":""},{"path":"/articles/poster.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"SI2022 poster","text":"Script download data used poster:","code":"# GBIF data  library(tidyverse) library(ggOceanMaps) library(rgbif)  species <- c(BlueShark = \"Prionace glauca\", BaskingShark = \"Cetorhinus maximus\")  GBIF <- lapply(seq_along(species), function(i) {      message(species[i], \"...\")      key <- rgbif::name_backbone(name = species[[i]])[c(\"canonicalName\", \"speciesKey\")]      rgbif::occ_search(taxonKey = key$speciesKey, return = \"data\", limit = 4e5, geometry = c(-20, 30, 20, 76)) })  GBIF_blue <- GBIF[[1]]$data %>%    rename(\"lat\" = \"decimalLatitude\", \"lon\" = \"decimalLongitude\") %>%    dplyr::select(lon, lat) %>%    transform_coord(bind = TRUE) %>%    dist2land()  GBIF_basking <- GBIF[[2]]$data %>%    rename(\"lat\" = \"decimalLatitude\", \"lon\" = \"decimalLongitude\") %>%    dplyr::select(lon, lat) %>%    transform_coord(bind = TRUE) %>%    dist2land()  # Dugnad for havet data  DugnadForHavet <- read_delim(   \"data/DFH_basking_shark.csv\", # from: https://dugnadforhavet.no/dataportal   delim = \";\") %>%    arrange(amount) %>%    filter(!is.na(longitude), !is.na(latitude)) %>%    transform_coord(bind = TRUE) %>%    dist2land() %>%    as_tibble()"},{"path":"/articles/poster.html","id":"figures","dir":"Articles","previous_headings":"","what":"Figures","title":"SI2022 poster","text":"","code":"## Background map  a1_h <- 841-1 # Poster height without margins (A1) a1_w <- 594-1.2 # Poster width without margins (A1)  asp <- a1_h/a1_w # To get correct size because aspect ratio is fixed lon_min <- -1.5e6 # Projected coordinates lon_max <- 2e6  lat_min <- -6.5e6 lat_max <- lat_min + asp*diff(c(lon_min, lon_max))  bm <-    basemap(     c(lon_min, lon_max, lat_min, lat_max),      shapefiles = \"Arctic\",     lon.interval = 10,     bathymetry = TRUE,     legends = FALSE) +   theme(axis.title = element_blank()) +   geom_spatial_point(     data = DugnadForHavet,     aes(x = longitude, y = latitude, size = amount),     color = \"#FF5F68\", alpha = 0.8   ) +   geom_density_2d(     data = DugnadForHavet, contour_var = \"ndensity\", size = LS(1),     aes(x = lon.proj, y = lat.proj, color = after_stat(level))   ) +   geom_spatial_point(     data = GBIF_blue %>% filter(ldist > 0),      aes(x = lon, y = lat), color = \"#FFC95B\", alpha = 0.8, size = 3     ) +   geom_density_2d(     data = GBIF_blue, contour_var = \"ndensity\", size = LS(1),     aes(x = lon.proj, y = lat.proj, color = after_stat(level))     ) +   scale_size(range = c(1,10)) +   scale_color_distiller(palette = \"Spectral\", na.value = NA) +   theme(legend.position = \"none\")  ## Distance to land  DugnadForHavet %>%    mutate(species = \"Basking shark\") %>%    dplyr::select(species, ldist) %>%    bind_rows(     GBIF_basking %>% mutate(species = \"Basking shark\") %>%        dplyr::select(species, ldist),     GBIF_blue %>%        mutate(species = \"Blue shark\") %>%        dplyr::select(species, ldist)   ) %>%    ggplot(aes(x = ldist, after_stat(ndensity), color = species)) +    geom_freqpoly(size = LS(5)) +   scale_color_manual(values = c(\"#FF5F68\", \"#FFC95B\")) +   labs(x = \"Standardized density\", y = \"Distance from land (km)\",         color = \"Species\") +   coord_cartesian(expand = FALSE, ylim = c(0,1.05), xlim = c(0,500)) +   theme_classic() +   theme(legend.position = c(0.7,0.9))"},{"path":"/articles/premade-shapefiles.html","id":"low-resolution-shapefiles-in-ggoceanmapdata","dir":"Articles","previous_headings":"","what":"1. Low-resolution shapefiles in ggOceanMapData","title":"Pre-made shapefiles","text":"Download datasets specified Data sources folders computer. Replace paths correct folder paths computer. Define coordinate reference systems.","code":"etopoPath <- \"\" NEDPath <- \"\" gebcoPath <- \"\" outPath <- \"\" arcticCRS <- paste0(\"EPSG:\", shapefile_list(\"Arctic\")$crs) antarcticCRS <- paste0(\"EPSG:\", shapefile_list(\"Antarctic\")$crs) ddCRS <- paste0(\"EPSG:\", shapefile_list(\"Decimal\")$crs)"},{"path":"/articles/premade-shapefiles.html","id":"decimal-degrees","dir":"Articles","previous_headings":"1. Low-resolution shapefiles in ggOceanMapData","what":"Decimal degrees","title":"Pre-made shapefiles","text":"Bathymetry: Land: Glaciers:","code":"rb <- raster_bathymetry(   bathy = file.path(etopoPath, \"ETOPO1_Ice_g_gmt4.grd\"),   depths = c(50, 300, 500, 1000, 1500, 2000, 4000, 6000, 10000),    proj.out = ddCRS,    boundary = c(-180.0083, 180.0083, -90, 90),    aggregation.factor = 6 )  dd_bathy <- vector_bathymetry(rb, drop.crumbs = 50, remove.holes = 50)  save(dd_bathy, file = file.path(outPath, \"ggOceanMapsData/dd_bathy.rda\"), compress = \"xz\") world <- sf::st_read(file.path(NEDPath, \"ne_10m_land/ne_10m_land.shp\")) islands <- sf::st_read(file.path(NEDPath, \"ne_10m_minor_islands/ne_10m_minor_islands.shp\")) world <- rbind(world, islands)  dd_land <- clip_shapefile(world, c(-180, 180, -90, 90))  save(dd_land, file = file.path(outPath, \"ggOceanMapsData/dd_land.rda\"), compress = \"xz\") glaciers <- sf::st_read(file.path(NEDPath, \"ne_10m_glaciated_areas/ne_10m_glaciated_areas.shp\")) iceshelves <- sf::st_read(file.path(NEDPath, \"ne_10m_antarctic_ice_shelves_polys/ne_10m_antarctic_ice_shelves_polys.shp\"))  glaciers <- sf::as_Spatial(rbind(glaciers, iceshelves)) glaciers <- rgeos::gBuffer(glaciers, byid = TRUE, width = 0)  dd_glacier <- clip_shapefile(glaciers, c(-180, 180, -90, 90)) dd_glacier <- rgeos::gBuffer(dd_glacier, byid = FALSE, width = 0.1) dd_glacier <- rgeos::gBuffer(dd_glacier, byid = FALSE, width = -0.1)  save(dd_glacier, file = file.path(outPath, \"ggOceanMapsData/dd_glacier.rda\"), compress = \"xz\")"},{"path":"/articles/premade-shapefiles.html","id":"arctic-stereographic","dir":"Articles","previous_headings":"1. Low-resolution shapefiles in ggOceanMapData","what":"Arctic stereographic","title":"Pre-made shapefiles","text":"Bathymetry: Land: Glaciers:","code":"rb <- raster_bathymetry(   bathy = file.path(etopoPath, \"ETOPO1_Ice_g_gmt4.grd\"),    depths = c(50, 300, 500, 1000, 1500, 2000, 4000, 6000, 10000),    proj.out = arcticCRS,    boundary = c(-180.0083, 180.0083, 1, 90),    aggregation.factor = 2 )  arctic_bathy <- vector_bathymetry(rb)  save(arctic_bathy, file = file.path(outPath, \"ggOceanMapsData/arctic_bathy.rda\"), compress = \"xz\") arctic_land <- clip_shapefile(world, c(-180, 180, 1, 90)) arctic_land <- sp::spTransform(arctic_land, sp::CRS(arcticCRS)) arctic_land <- rgeos::gBuffer(arctic_land, byid = TRUE, width = 0)  save(arctic_land, file = file.path(outPath, \"ggOceanMapsData/arctic_land.rda\"), compress = \"xz\") arctic_glacier <- clip_shapefile(glaciers, c(-180, 180, 40, 90)) arctic_glacier <- sp::spTransform(arctic_glacier, sp::CRS(arcticCRS)) arctic_glacier <- rgeos::gBuffer(arctic_glacier, byid = FALSE, width = 1000) arctic_glacier <- rgeos::gBuffer(arctic_glacier, byid = FALSE, width = -1000)  save(arctic_glacier, file = file.path(outPath, \"ggOceanMapsData/arctic_glacier.rda\"), compress = \"xz\")"},{"path":"/articles/premade-shapefiles.html","id":"antarctic-steregraphic","dir":"Articles","previous_headings":"1. Low-resolution shapefiles in ggOceanMapData","what":"Antarctic steregraphic","title":"Pre-made shapefiles","text":"Bathymetry: Land: Glaciers:","code":"rb <- raster_bathymetry(   bathy = file.path(etopoPath, \"ETOPO1_Ice_g_gmt4.grd\"),    depths = c(50, 300, 500, 1000, 1500, 2000, 4000, 6000, 10000),    proj.out = antarcticCRS,    boundary = c(-180.0083, 180.0083, -80, -30),    aggregation.factor = 2 )  antarctic_bathy <- vector_bathymetry(rb)  save(antarctic_bathy, file = file.path(outPath, \"ggOceanMapsData/antarctic_bathy.rda\"), compress = \"xz\") antarctic_land <- clip_shapefile(world, c(-180, 180, -90, -30)) antarctic_land <- sp::spTransform(antarctic_land, sp::CRS(antarcticCRS)) antarctic_land <- rgeos::gBuffer(antarctic_land, byid = TRUE, width = 0)  save(antarctic_land, file = file.path(outPath, \"ggOceanMapsData/antarctic_land.rda\"), compress = \"xz\") antarctic_glacier <- clip_shapefile(glaciers, c(-180, 180, -90, -30)) antarctic_glacier <- sp::spTransform(antarctic_glacier, sp::CRS(antarcticCRS)) antarctic_glacier <- rgeos::gBuffer(antarctic_glacier, byid = FALSE, width = 1000) antarctic_glacier <- rgeos::gBuffer(antarctic_glacier, byid = FALSE, width = -1000)  save(antarctic_glacier, file = file.path(outPath, \"ggOceanMapsData/antarctic_glacier.rda\"), compress = \"xz\")"},{"path":[]},{"path":"/articles/premade-shapefiles.html","id":"barents-sea","dir":"Articles","previous_headings":"2. High-resolution shapefiles in ggOceanMapsLargeData","what":"Barents Sea","title":"Pre-made shapefiles","text":"Bathymetry: Land: Glaciers: Save data","code":"bound.limits <- c(-25, 75, 65, 84)  rb <- raster_bathymetry(   bathy = file.path(gebcoPath, \"GEBCO_2020.nc\"),    depths = c(50, 100, 200, 300, 400, 500, 750, 1000, 1500, 2000,               3000, 4000, 5000, 6000, 10000),    proj.out = paste0(\"EPSG:\", shapefile_list(\"Barents\")$crs),    boundary = bound.limits )  barentssea_bathy <- vector_bathymetry(rb) barentssea_land <- clip_shapefile(world, bound.limits) barentssea_land <- sp::spTransform(   barentssea_land,    sp::CRS(paste0(\"EPSG:\", shapefile_list(\"Barents\")$crs)) ) barentssea_land <- rgeos::gBuffer(barentssea_land, byid = TRUE, width = 0) barentssea_glacier <- clip_shapefile(glaciers, bound.limits) barentssea_glacier <- sp::spTransform(   barentssea_glacier,    sp::CRS(paste0(\"EPSG:\", shapefile_list(\"Barents\")$crs)) ) barentssea_glacier <- rgeos::gBuffer(barentssea_glacier, byid = TRUE, width = 0) save(barentssea_land, barentssea_glacier, barentssea_bathy,      file = paste(outPath, \"ggOceanMapsLargeData/barentssea.rda\", sep = \"/\"),      compress = \"xz\" )"},{"path":"/articles/premade-shapefiles.html","id":"high-resolution-arctic-stereographic","dir":"Articles","previous_headings":"2. High-resolution shapefiles in ggOceanMapsLargeData","what":"High resolution Arctic stereographic","title":"Pre-made shapefiles","text":"","code":"rb <- raster_bathymetry(   bathy = file.path(gebcoPath, \"GEBCO_2021.nc\"),    depths = c(50, 100, 200, 300, 400, 500, 750, 1000, 1500, 2000,               3000, 4000, 5000, 6000, 10000),    proj.out = arcticCRS,    boundary = c(-180.0083, 180.0083, 10, 90) )  gebco_bathy <- vector_bathymetry(rb)  save(gebco_bathy,       file = file.path(outPath, \"ggOceanMapsLargeData/gebco_bathy.rda\"),      compress = \"xz\" )"},{"path":"/articles/premade-shapefiles.html","id":"data-sources","dir":"Articles","previous_headings":"","what":"Data sources","title":"Pre-made shapefiles","text":"data used package property Institute Marine Research author package. , therefore, important cite data sources used map generate package. Please see list data sources.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mikko Vihtakari. Author, maintainer.            Institute Marine Research Yves Reecht. Contributor.            Institute Marine Research Hadley Wickham. Contributor. Simon O'Hanlon. Contributor. Roger Bivand. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vihtakari M (2022). ggOceanMaps: Plot Data Oceanographic Maps using 'ggplot2'. R package version 1.3.0, https://mikkovihtakari.github.io/ggOceanMaps/.","code":"@Manual{,   title = {ggOceanMaps: Plot Data on Oceanographic Maps using 'ggplot2'},   author = {Mikko Vihtakari},   year = {2022},   note = {R package version 1.3.0},   url = {https://mikkovihtakari.github.io/ggOceanMaps/}, }"},{"path":"/index.html","id":"ggoceanmaps","dir":"","previous_headings":"","what":"Plot Data on Oceanographic Maps using ggplot2","title":"Plot Data on Oceanographic Maps using ggplot2","text":"Plot data oceanographic maps using ggplot2. R package version 1.3.0","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Plot Data on Oceanographic Maps using ggplot2","text":"ggOceanMaps package R allows plotting data bathymetric maps using ggplot2. package designed ocean sciences greatly simplifies bathymetric map plotting anywhere around globe. ggOceanMaps uses openly available geographic data. Citing particular data sources advised CC-licenses whenever maps package published (see Citations data sources section). ggOceanMaps package developed Institute Marine Research. Note package comes absolutely warranty maps generated package meant plotting scientific data . maps coarse generalizations third-party data therefore inaccurate. bug reports code fixes warmly welcomed. See Contributions details.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Plot Data on Oceanographic Maps using ggplot2","text":"package available CRAN GitHub version, updated frequently CRAN version. Installation CRAN version: Due package size limitations, ggOceanMaps requires ggOceanMapsData package stores shapefiles used low-resolution maps. GitHub version ggOceanMaps can installed using devtools package.","code":"install.packages(\"ggOceanMaps\") devtools::install_github(\"MikkoVihtakari/ggOceanMapsData\") # required by ggOceanMaps devtools::install_github(\"MikkoVihtakari/ggOceanMaps\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Plot Data on Oceanographic Maps using ggplot2","text":"ggOceanMaps extends ggplot2. package uses spatial shapefiles, GIS packages R manipulate, ggspatial package help plot shapefiles. shapefile plotting conducted internally basemap function uses ggplot’s sf object plotting capabilities. Maps plotted using basemap() qmap() functions work almost similarly ggplot() base adding layers plot using + operator. maps generated way already contain multiple ggplot layers. Consequently, data argument needs explicitly specified inside geom_* functions adding ggplot2 layers. Depending location map, underlying coordinates may projected. Decimal degree coordinates need transformed projected coordinates using transform_coord, ggspatial, geom_sf functions.  See ggOceanMaps website, function reference, user manual use modify maps plotted package. may also find slides package useful.","code":"library(ggOceanMaps)  dt <- data.frame(lon = c(-30, -30, 30, 30), lat = c(50, 80, 80, 50))  basemap(data = dt, bathymetry = TRUE) +    geom_polygon(data = transform_coord(dt), aes(x = lon, y = lat), color = \"red\", fill = NA)"},{"path":"/index.html","id":"data-path","dir":"","previous_headings":"","what":"Data path","title":"Plot Data on Oceanographic Maps using ggplot2","text":"ggOceanMaps allows plotting custom-made shapefiles, package contains shortcut plot higher resolution maps certain areas needed author without need generating shapefiles manually. high-resolution shapefiles downloaded ggOceanMapsLargeData repository. default, shapefiles downloaded temporary directory meaning user need download large shapefiles every time restart R. limitation set CRAN policies. can define custom folder high-resolution shapefiles computer modifying .Rprofile file (e.g. usethis::edit_r_profile()). Add following lines file: smart use directory R writing access . example \"~/Documents/ggOceanMapsLargeData\" work operating systems. need set data path .Rprofile file ggOceanMaps find path even though updated R packages. ggOceanMaps inform data path load package.","code":".ggOceanMapsenv <- new.env() .ggOceanMapsenv$datapath <- 'YourCustomPath'"},{"path":"/index.html","id":"citations-and-data-sources","dir":"","previous_headings":"","what":"Citations and data sources","title":"Plot Data on Oceanographic Maps using ggplot2","text":"data used package property Institute Marine Research author package. , therefore, important cite data sources used map generate package. spatial data used package acquired following sources: ggOceanMapsData land polygons. Natural Earth Data 1:10m Physical Vectors Land Minor Island datasets combined. Distributed CC Public Domain license (terms use). ggOceanMapsData glacier polygons. Natural Earth Data 1:10m Physical Vectors Glaciated Areas Antarctic Ice Shelves datasets combined. Distributed CC Public Domain license (terms use). ggOceanMapsData bathymetry. Amante, C. B.W. Eakins, 2009. ETOPO1 1 Arc-Minute Global Relief Model: Procedures, Data Sources Analysis. NOAA Technical Memorandum NESDIS NGDC-24. National Geophysical Data Center, NOAA. Distributed U.S. Government Work license. Detailed shapefiles Svalbard Norwegian coast ggOceanMapsLargeData Geonorge.. Distributed CC 4.0 license. Detailed bathymetry Barents Sea ggOceanMapsLargeData vectorized General Bathymetric Chart Oceans 15-arcsecond 2020 grid. Terms use , please cite package whenever maps generated package published. --date citation information, please use:","code":"citation(\"ggOceanMaps\") #>  #> To cite package 'ggOceanMaps' in publications use: #>  #>   Vihtakari M (2022). _ggOceanMaps: Plot Data on Oceanographic Maps #>   using 'ggplot2'_. R package version 1.3.0, #>   <https://mikkovihtakari.github.io/ggOceanMaps/>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {ggOceanMaps: Plot Data on Oceanographic Maps using 'ggplot2'}, #>     author = {Mikko Vihtakari}, #>     year = {2022}, #>     note = {R package version 1.3.0}, #>     url = {https://mikkovihtakari.github.io/ggOceanMaps/}, #>   }"},{"path":"/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Plot Data on Oceanographic Maps using ggplot2","text":"problem involve bugs ggOceanMaps, quickest way getting help posting problem Stack Overflow. Please remember include reproducible example illustrates problem.","code":""},{"path":"/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Plot Data on Oceanographic Maps using ggplot2","text":"contributions package welcome. Please contact package maintainer Mikko Vihtakari (mikko.vihtakari@hi.) discuss ideas improving package. Bug reports corrections submitted directly GitHub site. Please include minimal reproducible example. Considerable contributions package development credited authorship.","code":""},{"path":"/index.html","id":"debugging-installation","dir":"","previous_headings":"","what":"Debugging installation","title":"Plot Data on Oceanographic Maps using ggplot2","text":"successful installation, following code return plot shown  basemap() function complains ggOceanMapsData package available, drat repository may issues (assuming followed installation instructions ). Try installing ggOceanMapsData package using devtools/remotes package. data package contain C++ code compile easily. encounter problems devtools installation, may set upgrade argument \"never\" try following steps: Manually update R packages installed (Packages -> Update -> Select -> Install updates R Studio). update package fails, try installing package using install.packages function R Studio menu. Run devtools::install_github(\"MikkoVihtakari/ggOceanMaps\", upgrade = \"never\"). installation dependency fails, try installing package manually repeat step 2. Since R lately updated 4.0, may update R latest major version dependencies work (stars, rgdal sf reported cause trouble installation).","code":"library(ggOceanMaps) basemap(60)"},{"path":"/reference/FS.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert font sizes measured as points to ggplot font sizes — FS","title":"Convert font sizes measured as points to ggplot font sizes — FS","text":"Converts font sizes measured points (given programs MS Word etc.) ggplot font sizes","code":""},{"path":"/reference/FS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert font sizes measured as points to ggplot font sizes — FS","text":"","code":"FS(x)"},{"path":"/reference/FS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert font sizes measured as points to ggplot font sizes — FS","text":"x numeric vector giving font sizes points","code":""},{"path":"/reference/FS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert font sizes measured as points to ggplot font sizes — FS","text":"Returns numeric vector lenght x ggplot font sizes","code":""},{"path":[]},{"path":"/reference/LS.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert line sizes measured as points to ggplot line sizes — LS","title":"Convert line sizes measured as points to ggplot line sizes — LS","text":"Converts line sizes measured points (given programs Adobe Illustrator etc.) ggplot font sizes","code":""},{"path":"/reference/LS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert line sizes measured as points to ggplot line sizes — LS","text":"","code":"LS(x)"},{"path":"/reference/LS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert line sizes measured as points to ggplot line sizes — LS","text":"x numeric vector giving lines sizes points","code":""},{"path":"/reference/LS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert line sizes measured as points to ggplot line sizes — LS","text":"Returns numeric vector lenght x ggplot line sizes","code":""},{"path":[]},{"path":"/reference/auto_limits.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic limits for basemap — auto_limits","title":"Automatic limits for basemap — auto_limits","text":"Find limits basemap data frame.","code":""},{"path":"/reference/auto_limits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic limits for basemap — auto_limits","text":"","code":"auto_limits(   data,   lon = NULL,   lat = NULL,   proj.in = 4326,   proj.out = NULL,   expand.factor = NULL,   verbose = FALSE,   output.sf = FALSE )"},{"path":"/reference/auto_limits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic limits for basemap — auto_limits","text":"data Data frame containing data limits calculated. lon, lat Names longitude latitude columns data character integer index. NULL, column names guessed. proj.Original CRS projection. Must defined character argument. proj.Resulting map projection. See transform_coord. expand.factor Expansion factor map limits. Set NULL ignore. verbose Logical indicating whether information projection guessed column names returned message. Set FALSE make function silent. output.sf Logical indicating whether sf (TRUE) sp (FALSE) polygon returned. rotate Logical indicating whether limits rotated point towards pole relative mid-longitude limit.","code":""},{"path":"/reference/auto_limits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic limits for basemap — auto_limits","text":"list limits projections proj.proj.formats.","code":""},{"path":"/reference/auto_limits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Automatic limits for basemap — auto_limits","text":"internal function, automatically run basemap function.","code":""},{"path":[]},{"path":"/reference/auto_limits.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automatic limits for basemap — auto_limits","text":"Mikko Vihtakari","code":""},{"path":"/reference/auto_limits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatic limits for basemap — auto_limits","text":"","code":"if(requireNamespace(\"ggOceanMapsData\")) { auto_limits(data = expand.grid(lon = c(-120, 180, 120),    lat = c(60, 60, 80))) } #> Loading required namespace: ggOceanMapsData #> $ddLimits #> [1]  120 -120   60   80 #>  #> $projLimits #> [1] -2886578.7  2886578.7   544589.7  3333134.0 #>  #> $projBound #> class       : SpatialPolygons  #> features    : 1  #> extent      : -2886579, 2886579, 544589.7, 3333134  (xmin, xmax, ymin, ymax) #> crs         : +proj=stere +lat_0=90 +lat_ts=71 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #>  #> $proj.in #> Coordinate Reference System: #>   User input: EPSG:4326  #>   wkt: #> GEOGCRS[\"WGS 84\", #>     ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>         MEMBER[\"World Geodetic System 1984 (Transit)\"], #>         MEMBER[\"World Geodetic System 1984 (G730)\"], #>         MEMBER[\"World Geodetic System 1984 (G873)\"], #>         MEMBER[\"World Geodetic System 1984 (G1150)\"], #>         MEMBER[\"World Geodetic System 1984 (G1674)\"], #>         MEMBER[\"World Geodetic System 1984 (G1762)\"], #>         MEMBER[\"World Geodetic System 1984 (G2139)\"], #>         ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>             LENGTHUNIT[\"metre\",1]], #>         ENSEMBLEACCURACY[2.0]], #>     PRIMEM[\"Greenwich\",0, #>         ANGLEUNIT[\"degree\",0.0174532925199433]], #>     CS[ellipsoidal,2], #>         AXIS[\"geodetic latitude (Lat)\",north, #>             ORDER[1], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         AXIS[\"geodetic longitude (Lon)\",east, #>             ORDER[2], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>     USAGE[ #>         SCOPE[\"Horizontal component of 3D system.\"], #>         AREA[\"World.\"], #>         BBOX[-90,-180,90,180]], #>     ID[\"EPSG\",4326]] #>  #> $proj.out #> Coordinate Reference System: #>   User input: EPSG:3995  #>   wkt: #> PROJCRS[\"WGS 84 / Arctic Polar Stereographic\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"Arctic Polar Stereographic\", #>         METHOD[\"Polar Stereographic (variant B)\", #>             ID[\"EPSG\",9829]], #>         PARAMETER[\"Latitude of standard parallel\",71, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8832]], #>         PARAMETER[\"Longitude of origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8833]], #>         PARAMETER[\"False easting\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"easting (X)\",south, #>             MERIDIAN[90, #>                 ANGLEUNIT[\"degree\",0.0174532925199433]], #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"northing (Y)\",south, #>             MERIDIAN[180, #>                 ANGLEUNIT[\"degree\",0.0174532925199433]], #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Polar research.\"], #>         AREA[\"Northern hemisphere - north of 60°N onshore and offshore, including Arctic.\"], #>         BBOX[60,-180,90,180]], #>     ID[\"EPSG\",3995]] #>"},{"path":"/reference/basemap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a ggplot2 basemap for plotting variables — basemap","title":"Create a ggplot2 basemap for plotting variables — basemap","text":"Creates ggplot2 basemap plotting variables.","code":""},{"path":"/reference/basemap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a ggplot2 basemap for plotting variables — basemap","text":"","code":"basemap(   x = NULL,   limits = NULL,   data = NULL,   shapefiles = NULL,   bathymetry = FALSE,   glaciers = FALSE,   rotate = FALSE,   legends = TRUE,   legend.position = \"right\",   lon.interval = NULL,   lat.interval = NULL,   bathy.style = \"poly_blues\",   bathy.border.col = NA,   bathy.size = 0.1,   bathy.alpha = 1,   land.col = \"grey60\",   land.border.col = \"black\",   land.size = 0.1,   gla.col = \"grey95\",   gla.border.col = \"black\",   gla.size = 0.1,   grid.col = \"grey70\",   grid.size = 0.1,   base_size = 11,   projection.grid = FALSE,   expand.factor = 1.1,   verbose = FALSE )"},{"path":"/reference/basemap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a ggplot2 basemap for plotting variables — basemap","text":"x limit type (limits data) automatically recognized class argument. limits Map limits. One following: numeric vector length 4: first element defines start longitude, second element end longitude (counter-clockwise), third element minimum latitude fourth element maximum latitude bounding box. coordinates can given decimal degrees coordinate units shapefiles used projected map. Produces rectangular map. Latitude limits given min-max order automatically ordered respect requirement. single integer 30 88 -88 -30 produces polar map Arctic Antarctic, respectively. Can omitted data shapefiles defined. data data frame, SpatialPolygons, sf shape containing longitude latitude coordinates. data frame, coordinates given decimal degrees. limits extracted coordinates produces rectangular map. Suited situations certain dataset plotted map. function attempts guess correct columns advised use intuitive column names longitude (\"lon\", \"long\", \"longitude\") latitude (\"lat\", \"latitude\") columns. Can omitted limits shapefiles defined. shapefiles Either list containing shapefile information character argument referring name pre-made shapefiles shapefile_list. name partially matched. Can omitted limits data defined decimal degrees. bathymetry Logical indicating whether bathymetry added map. glaciers Logical indicating whether glaciers ice-sheets added map. rotate Logical indicating whether projected maps rotated point towards pole relative mid-longitude limit. Experimental. legends Logical indicating whether legend bathymetry shown. legend.position position ggplot2 legend. See argument name theme. lon.interval, lat.interval Numeric value specifying interval longitude latitude grids. NULL finds reasonable defaults depending limits. bathy.style Character defining style bathymetry contours. Alternatives: \"poly_blues\" plots polygons filled different shades blue. \"poly_greys\" plots polygons filled different shades gray. \"contour_blues\" contour lines different shades blue. \"contour_grey\" plots gray contour lines. bathy.alpha Transparency parameter bathymetry fill color. See scale_alpha. land.col, gla.col, grid.col Character code specifying color land, glaciers grid lines, respectively. Use NA remove grid lines. land.border.col, gla.border.col, bathy.border.col Character code specifying color border line land, glacier, bathymetry shapes. land.size, gla.size, bathy.size, grid.size Numeric value specifying width border line land, glacier bathymetry shapes well grid lines, respectively. Use LS function specific width pt. See Details. base_size Base size parameter ggplot. See ggtheme. projection.grid Logical indicating whether coordinate grid show projected coordinates instead decimal degree values. Useful define limits large maps polar regions. expand.factor Expansion factor map limits data argument. Can used zoom automatically limited maps. Defaults 1.1. Set NULL ignore. verbose Logical indicating whether information projection guessed column names returned message. Set FALSE make function silent.","code":""},{"path":"/reference/basemap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a ggplot2 basemap for plotting variables — basemap","text":"Returns ggplot map, can assigned object modified ggplot object.","code":""},{"path":"/reference/basemap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a ggplot2 basemap for plotting variables — basemap","text":"function uses ggplot2, ggspatial, GIS packages R, shapefiles plot maps world's oceans. Projections shapefiles specified, function uses either limits data arguments decide projection use. --date conditions defined define_shapefiles shapefile_list functions. time writing, function uses three different projections (given EPSG codes) 3995 WGS 84 / Arctic Polar Stereographic. Called \"ArcticStereographic\". max latitude (limits[4]) >= 60 (min latitude (limits[3]) >= 30), single integer latitudes >= 30 <= 89. 3031 WGS 84 / Antarctic Polar Stereographic. Called \"AntarcticStereographic\". max latitude (limits[4]) <= -60 (min latitude (limits[3]) <= -30), single integer latitudes <= -30 >= -89. 4326 WGS 84 / World Geodetic System 1984, used GPS. Called \"DecimalDegree\". min latitude (limits[3]) < 30 > -30, max latitude (limits[4]) < 60 > -60, single integer latitudes < 30 > -30. Limits limits decimal degrees, longitude limits ([1:2]) specify start end segments corresponding angular lines reside inside map area. longitude limits defined counter-clockwise. latitude limits [3:4] define parallels reside inside limited region given longitude segments. Note actual limited region becomes wider polygon defined coordinates (shown Examples). Using data limit map expands map around data points make fit map. limits given projected coordinates decimal degrees maps -60 < latitude < 60, limits elements represent lines encompassing map area cartesian space. Pre-made shapefiles limits defined decimal degrees (longitude outside range [-180, 180] latitude [-90, 90]), function ask specify shapefiles. shapefiles can defined partially matching names pre-made shapefiles shapefile_list (e.g. \"Ar\" enough \"ArcticStereographic\") specifying custom shapefiles. Custom shapefiles Custom shapefiles named list containing least following elements: land Object name SpatialPolygonsDataFrame containing land. Required. glacier Object name SpatialPolygonsDataFrame containing glaciers. Use NULL glaciers needed. bathy Object name SpatialPolygonsDataFrame containing bathymetry contours. Use NULL bathymetry needed. See Examples. Line width font size line size aesthetics ggplot2 generates approximately 2.13 wider lines measured pt given values. want specific line width pt, use internal function LS convert desired line width ggplot2 equivalent. similar function also available font sizes (FS). CRS warnings Open-source GIS systems rolling new new projection definition system. changes underlying systems appear sometimes trigger warnings user can ignore long resulting map looks OK. Bug reports regarding warnings appreciated.","code":""},{"path":"/reference/basemap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a ggplot2 basemap for plotting variables — basemap","text":"Note use function generate maps publication, advised cite underlying data. spatial data used function acquired following sources: Land polygons. Natural Earth Data 1:10m Physical Vectors Land Minor Island datasets combined. Distributed CC Public Domain license (terms use). Glacier polygons. Natural Earth Data 1:10m Physical Vectors Glaciated Areas Antarctic Ice Shelves datasets combined. Distributed CC Public Domain license (terms use) Bathymetry. Amante, C. B.W. Eakins, 2009. ETOPO1 1 Arc-Minute Global Relief Model: Procedures, Data Sources Analysis. NOAA Technical Memorandum NESDIS NGDC-24. National Geophysical Data Center, NOAA. Distributed U.S. Government Work license.","code":""},{"path":[]},{"path":"/reference/basemap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a ggplot2 basemap for plotting variables — basemap","text":"Mikko Vihtakari","code":""},{"path":"/reference/basemap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a ggplot2 basemap for plotting variables — basemap","text":"","code":"# The easiest way to produce a map is to use the limits # argument and decimal degrees:  if(requireNamespace(\"ggOceanMapsData\")) { basemap(limits = 60) }   # Bathymetry and glaciers can be added using the respective arguments: # \\donttest{ basemap(limits = -60, bathymetry = TRUE, glaciers = TRUE)  # } # The easiest way to add data on the maps is to use the ggspatial functions:  dt <- data.frame(lon = c(-150, 150), lat = c(60, 90)) # \\donttest{ basemap(data = dt, bathymetry = TRUE) + geom_spatial_point(data = dt, aes(x = lon, y = lat), color = \"red\") #> Assuming `crs = 4326` in stat_spatial_identity()  # } if (FALSE) { # Note that writing out data = dt is required because there are multiple # underlying ggplot layers plotted already: basemap(data = dt) + geom_spatial_point(dt, aes(x = lon, y = lat), color = \"red\") #> Error: `mapping` must be created by `aes()` }  # If you want to use native ggplot commands, you need to transform your data # to the projection used by the map:  if(requireNamespace(\"ggOceanMapsData\")) { dt <- transform_coord(dt, bind = TRUE)  basemap(data = dt) + geom_point(data = dt, aes(x = lon.proj, y = lat.proj)) }  # \\donttest{ # The limits argument of length 4 plots a map anywhere in the world:  basemap(limits = c(100, 160, -20, 30), bathymetry = TRUE)   # The argument leads to expanded maps towards poles:  dt <- data.frame(lon = c(-160, 160, 160, -160), lat = c(80, 80, 60, 60))  basemap(limits = c(160, -160, 60, 80)) + geom_spatial_polygon(data = dt, aes(x = lon, y = lat), fill = NA, color = \"red\") #> Assuming `crs = 4326` in stat_spatial_identity()   # The limits are further expanded when using the data argument:  basemap(data = dt) + geom_spatial_polygon(data = dt, aes(x = lon, y = lat), fill = NA, color = \"red\") #> Assuming `crs = 4326` in stat_spatial_identity()   # Rotate:  basemap(data = dt, rotate = TRUE) + geom_spatial_polygon(data = dt, aes(x = lon, y = lat),                     fill = NA, color = \"red\") #> Assuming `crs = 4326` in stat_spatial_identity()   ## To find UTM coordinates to limit a polar map: basemap(limits = 60, projection.grid = TRUE)  basemap(limits = c(2.5e4, -2.5e6, 2e6, -2.5e5), shapefiles = \"Arctic\")   # Using custom shapefiles data(bs_shapes, package = \"ggOceanMapsData\") basemap(shapefiles = list(land = bs_land, glacier = NULL, bathy = bs_bathy), bathymetry = TRUE)   # grid.col = NA removes grid lines, rotate = TRUE rotates northwards  basemap(limits = c(-180, -140, 50, 70), grid.col = NA, rotate = TRUE)   # Rename axis labels  basemap(limits = c(-140, -105, 20, 40), bathymetry = TRUE) + xlab(\"Lat\")   # Remove axis labels  basemap(limits = c(0, 60, 68, 80)) + labs(x = NULL, y = NULL)   basemap(limits = c(0, 60, 68, 80), rotate = TRUE) + theme(axis.title = element_blank(),       axis.text = element_blank(),       axis.ticks.x = element_blank(),       axis.ticks.y = element_blank()       )  # }"},{"path":"/reference/basemap_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create basemapData object for basemap plotting — basemap_data","title":"Create basemapData object for basemap plotting — basemap_data","text":"Internal function create basemapData object basemap","code":""},{"path":"/reference/basemap_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create basemapData object for basemap plotting — basemap_data","text":"","code":"basemap_data(   limits = NULL,   data = NULL,   shapefiles = NULL,   bathymetry = FALSE,   glaciers = FALSE,   lon.interval = NULL,   lat.interval = NULL,   expand.factor = 1.1,   rotate = FALSE,   verbose = FALSE )"},{"path":"/reference/basemap_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create basemapData object for basemap plotting — basemap_data","text":"limits Map limits. One following: numeric vector length 4: first element defines start longitude, second element end longitude (counter-clockwise), third element minimum latitude fourth element maximum latitude bounding box. coordinates can given decimal degrees coordinate units shapefiles used projected map. Produces rectangular map. Latitude limits given min-max order automatically ordered respect requirement. single integer 30 88 -88 -30 produces polar map Arctic Antarctic, respectively. Can omitted data shapefiles defined. data data frame, SpatialPolygons, sf shape containing longitude latitude coordinates. data frame, coordinates given decimal degrees. limits extracted coordinates produces rectangular map. Suited situations certain dataset plotted map. function attempts guess correct columns advised use intuitive column names longitude (\"lon\", \"long\", \"longitude\") latitude (\"lat\", \"latitude\") columns. Can omitted limits shapefiles defined. shapefiles Either list containing shapefile information character argument referring name pre-made shapefiles shapefile_list. name partially matched. Can omitted limits data defined decimal degrees. bathymetry Logical indicating whether bathymetry added map. glaciers Logical indicating whether glaciers ice-sheets added map. lon.interval, lat.interval Numeric value specifying interval longitude latitude grids. NULL finds reasonable defaults depending limits. expand.factor Expansion factor map limits data argument. Can used zoom automatically limited maps. Defaults 1.1. Set NULL ignore. rotate Logical indicating whether projected maps rotated point towards pole relative mid-longitude limit. Experimental. verbose Logical indicating whether information projection guessed column names returned message. Set FALSE make function silent.","code":""},{"path":"/reference/basemap_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create basemapData object for basemap plotting — basemap_data","text":"list class basemapData containing information required plotting basemap.","code":""},{"path":"/reference/basemap_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create basemapData object for basemap plotting — basemap_data","text":"internal function, automatically run basemap function. Common users need worry details.","code":""},{"path":[]},{"path":"/reference/basemap_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create basemapData object for basemap plotting — basemap_data","text":"Mikko Vihtakari","code":""},{"path":"/reference/clip_shapefile.html","id":null,"dir":"Reference","previous_headings":"","what":"Clip a shapefile (SpatialPolygon) using a bounding area — clip_shapefile","title":"Clip a shapefile (SpatialPolygon) using a bounding area — clip_shapefile","text":"Clips area larger shape file (SpatialPolygons).","code":""},{"path":"/reference/clip_shapefile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clip a shapefile (SpatialPolygon) using a bounding area — clip_shapefile","text":"","code":"clip_shapefile(   x,   limits,   proj.limits = convert_crs(4326),   simplify = FALSE,   tol = 60,   return.boundary = FALSE )"},{"path":"/reference/clip_shapefile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clip a shapefile (SpatialPolygon) using a bounding area — clip_shapefile","text":"x Original shape file clipped sp sf polygons object. Required. Must contain CRS information. limits constraining area used clip x. Required. Either numeric vector length 4 SpatialPolygons object. first element numeric vector defines minimum longitude, second element maximum longitude, third element minimum latitude fourth element maximum latitude bounding box. SpatialPolygons object must contain CRS information. See details. proj.limits CRS projection attributes limits character string (passed CRS). Use PROJ6 format. Defaults decimal degrees (see Usage). simplify x geometry simplified clipping? Useful make function faster large shape files. Uses rgeos::gSimplify function. tol Numerical tolerance value used simplification. See ?rgeos::gSimplify. return.boundary logical. TRUE returns clip boundary together shapefile","code":""},{"path":"/reference/clip_shapefile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clip a shapefile (SpatialPolygon) using a bounding area — clip_shapefile","text":"Clipped SpatialPolygons object. return.boundary = TRUE, list containing shapefile together clip boundary.","code":""},{"path":"/reference/clip_shapefile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clip a shapefile (SpatialPolygon) using a bounding area — clip_shapefile","text":"function uses rgeos::gIntersection function clip smaller SpatialPolygons larger ones. clip area constrained either numeric vector SpatialPolygons object limits argument. One arguments must given. Defining limits SpatialPolygons object gives greater freedom clip area area rectangular.","code":""},{"path":[]},{"path":"/reference/clip_shapefile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Clip a shapefile (SpatialPolygon) using a bounding area — clip_shapefile","text":"Mikko Vihtakari solution Simon O'Hanlon, Roger Bivand/community","code":""},{"path":"/reference/convert_crs.html","id":null,"dir":"Reference","previous_headings":"","what":"convert_crs, system specific epsg code string formating for CRS. — convert_crs","title":"convert_crs, system specific epsg code string formating for CRS. — convert_crs","text":"Temporary workaround specification projargs CRS(), required migration GDAL >= 3 PROJ >= 6.","code":""},{"path":"/reference/convert_crs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert_crs, system specific epsg code string formating for CRS. — convert_crs","text":"","code":"convert_crs(epsg = 4326)"},{"path":"/reference/convert_crs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert_crs, system specific epsg code string formating for CRS. — convert_crs","text":"epsg EPSG code projection (coercible character string).","code":""},{"path":"/reference/convert_crs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert_crs, system specific epsg code string formating for CRS. — convert_crs","text":"character string can used projargs CRS (sp) function: either SRS_string (e.g. \"EPSG:4326\") \"+init\" PROJ string (e.g. \"+init=epsg:4326\"), depending libraries packages versions used.","code":""},{"path":"/reference/convert_crs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"convert_crs, system specific epsg code string formating for CRS. — convert_crs","text":"Test version GDAL, PROJ sp, return appropriate format.","code":""},{"path":"/reference/convert_crs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"convert_crs, system specific epsg code string formating for CRS. — convert_crs","text":"Yves Reecht","code":""},{"path":"/reference/convert_crs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert_crs, system specific epsg code string formating for CRS. — convert_crs","text":"","code":"convert_crs() #> [1] \"EPSG:4326\" sp::CRS(projargs = convert_crs()) #> Coordinate Reference System: #> Deprecated Proj.4 representation: +proj=longlat +datum=WGS84 +no_defs  #> WKT2 2019 representation: #> GEOGCRS[\"WGS 84 (with axis order normalized for visualization)\", #>     ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>         MEMBER[\"World Geodetic System 1984 (Transit)\", #>             ID[\"EPSG\",1166]], #>         MEMBER[\"World Geodetic System 1984 (G730)\", #>             ID[\"EPSG\",1152]], #>         MEMBER[\"World Geodetic System 1984 (G873)\", #>             ID[\"EPSG\",1153]], #>         MEMBER[\"World Geodetic System 1984 (G1150)\", #>             ID[\"EPSG\",1154]], #>         MEMBER[\"World Geodetic System 1984 (G1674)\", #>             ID[\"EPSG\",1155]], #>         MEMBER[\"World Geodetic System 1984 (G1762)\", #>             ID[\"EPSG\",1156]], #>         MEMBER[\"World Geodetic System 1984 (G2139)\", #>             ID[\"EPSG\",1309]], #>         ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",7030]], #>         ENSEMBLEACCURACY[2.0], #>         ID[\"EPSG\",6326]], #>     PRIMEM[\"Greenwich\",0, #>         ANGLEUNIT[\"degree\",0.0174532925199433], #>         ID[\"EPSG\",8901]], #>     CS[ellipsoidal,2], #>         AXIS[\"geodetic longitude (Lon)\",east, #>             ORDER[1], #>             ANGLEUNIT[\"degree\",0.0174532925199433, #>                 ID[\"EPSG\",9122]]], #>         AXIS[\"geodetic latitude (Lat)\",north, #>             ORDER[2], #>             ANGLEUNIT[\"degree\",0.0174532925199433, #>                 ID[\"EPSG\",9122]]], #>     USAGE[ #>         SCOPE[\"Horizontal component of 3D system.\"], #>         AREA[\"World.\"], #>         BBOX[-90,-180,90,180]], #>     REMARK[\"Axis order reversed compared to EPSG:4326\"]]  sp::CRS(projargs = convert_crs(epsg = 27700)) #> Warning: Discarded datum Ordnance Survey of Great Britain 1936 in Proj4 definition #> Coordinate Reference System: #> Deprecated Proj.4 representation: #>  +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 #> +y_0=-100000 +ellps=airy +units=m +no_defs  #> WKT2 2019 representation: #> PROJCRS[\"OSGB36 / British National Grid\", #>     BASEGEOGCRS[\"OSGB36\", #>         DATUM[\"Ordnance Survey of Great Britain 1936\", #>             ELLIPSOID[\"Airy 1830\",6377563.396,299.3249646, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4277]], #>     CONVERSION[\"British National Grid\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",49, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-2, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996012717, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",400000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",-100000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"United Kingdom (UK) - offshore to boundary of UKCS within 49°45'N to 61°N and 9°W to 2°E; onshore Great Britain (England, Wales and Scotland). Isle of Man onshore.\"], #>         BBOX[49.75,-9,61.01,2.01]], #>     ID[\"EPSG\",27700]]"},{"path":"/reference/dd_to_deg.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert decimal degree values to angular degrees — dd_to_deg","title":"Convert decimal degree values to angular degrees — dd_to_deg","text":"Converts decimal degree values angular degrees. Used decimal degree limit calculations.","code":""},{"path":"/reference/dd_to_deg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert decimal degree values to angular degrees — dd_to_deg","text":"","code":"dd_to_deg(x)"},{"path":"/reference/dd_to_deg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert decimal degree values to angular degrees — dd_to_deg","text":"x numeric converted","code":""},{"path":"/reference/dd_to_deg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert decimal degree values to angular degrees — dd_to_deg","text":"vector angular degrees","code":""},{"path":[]},{"path":"/reference/dd_to_deg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert decimal degree values to angular degrees — dd_to_deg","text":"Mikko Vihtakari","code":""},{"path":"/reference/define_shapefiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a shapefile to use in plotting from the limits argument — define_shapefiles","title":"Define a shapefile to use in plotting from the limits argument — define_shapefiles","text":"internal function make basemap code readable","code":""},{"path":"/reference/define_shapefiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a shapefile to use in plotting from the limits argument — define_shapefiles","text":"","code":"define_shapefiles(limits)"},{"path":"/reference/define_shapefiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a shapefile to use in plotting from the limits argument — define_shapefiles","text":"limits numeric vector length 4: first element defines minimum longitude, second element maximum longitude, third element minimum latitude fourth element maximum latitude bounding box.","code":""},{"path":"/reference/define_shapefiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a shapefile to use in plotting from the limits argument — define_shapefiles","text":"list containing correct shapefile logical statement whether limits supplied decimal degrees.","code":""},{"path":"/reference/define_shapefiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define a shapefile to use in plotting from the limits argument — define_shapefiles","text":"internal function, automatically run basemap function.","code":""},{"path":[]},{"path":"/reference/define_shapefiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Define a shapefile to use in plotting from the limits argument — define_shapefiles","text":"Mikko Vihtakari","code":""},{"path":"/reference/deg_to_dd.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert angular degrees to decimal degree values — deg_to_dd","title":"Convert angular degrees to decimal degree values — deg_to_dd","text":"Converts angular degree values decimal degrees. Used decimal degree limit calculations.","code":""},{"path":"/reference/deg_to_dd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert angular degrees to decimal degree values — deg_to_dd","text":"","code":"deg_to_dd(x)"},{"path":"/reference/deg_to_dd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert angular degrees to decimal degree values — deg_to_dd","text":"x numeric converted","code":""},{"path":"/reference/deg_to_dd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert angular degrees to decimal degree values — deg_to_dd","text":"vector decimal degrees","code":""},{"path":[]},{"path":"/reference/deg_to_dd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert angular degrees to decimal degree values — deg_to_dd","text":"Mikko Vihtakari","code":""},{"path":"/reference/dist2land.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distance to the closest land for coordinates in a data frame — dist2land","title":"Calculate distance to the closest land for coordinates in a data frame — dist2land","text":"Calculates closest distance land coordinates data frame","code":""},{"path":"/reference/dist2land.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distance to the closest land for coordinates in a data frame — dist2land","text":"","code":"dist2land(   data,   lon = NULL,   lat = NULL,   shapefile = NULL,   proj.in = convert_crs(4326),   bind = TRUE,   dist.col = \"ldist\",   binary = FALSE,   cores = getCores(),   verbose = TRUE )"},{"path":"/reference/dist2land.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distance to the closest land for coordinates in a data frame — dist2land","text":"data Data.frame containing geographic coordinates lon, lat Either names longitude latitude columns data NULL guess longitude /latitude columns data. shapefile Land shape distances calculated. Either character argument referring name pre-made shapefiles shapefile_list, single SpatialPolygons object NULL enable automatic definition land shapes based data. proj.proj4string projection argument coordinates data. bind Logical indicating whether x returned distances (TRUE, default) distances returned vector (FALSE). dist.col name distance column, bind = TRUE. Defaults \"dist\". binary Logical indicating whether binary (TRUE = position ocean, FALSE = position land) returned instead distances. Speeds function considerably. cores Integer value defining many cores used distance calculations. Parallelization speeds function (see parallel::mclapply), naturally eats computer resources calculation. Set 1 remove parallelization. verbose Logical indicating whether information process returned messages. Set FALSE make function silent.","code":""},{"path":"/reference/dist2land.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distance to the closest land for coordinates in a data frame — dist2land","text":"Returns vector bind = FALSE, otherwise data frame. distances given new column defined dist.col argument. distances kilometers binary = FALSE, otherwise logical (TRUE = position ocean, FALSE = position land).","code":""},{"path":"/reference/dist2land.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate distance to the closest land for coordinates in a data frame — dist2land","text":"function calculates distances using projected coordinates rgeos::gDistance function. distances consider curvature Earth unless projection used land shape (check geosphere::dist2Line solution want exact distances). function fairly slow large datasets. want use function remove (wrong) observations reported land, set binary argument TRUE. speeds calculations considerably. dist2land function offers parallel processing, speeds calculations large datasets. Parallel processing tested Windows yet may work.","code":""},{"path":"/reference/dist2land.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate distance to the closest land for coordinates in a data frame — dist2land","text":"Mikko Vihtakari","code":""},{"path":"/reference/dist2land.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate distance to the closest land for coordinates in a data frame — dist2land","text":"","code":"# \\donttest{ # Simple example: dt <- data.frame(lon = seq(-20, 80, length.out = 41), lat = 50:90) dt <- dist2land(dt, cores = 1) #> Used lon and lat as input coordinate column names in data #> Using ArcticStereographic as land shapes. #> Calculating distances without parallel processing... #>    |                                                                               |                                                                      |   0%   |                                                                               |==                                                                    |   2%   |                                                                               |===                                                                   |   5%   |                                                                               |=====                                                                 |   7%   |                                                                               |=======                                                               |  10%   |                                                                               |=========                                                             |  12%   |                                                                               |==========                                                            |  15%   |                                                                               |============                                                          |  17%   |                                                                               |==============                                                        |  20%   |                                                                               |===============                                                       |  22%   |                                                                               |=================                                                     |  24%   |                                                                               |===================                                                   |  27%   |                                                                               |====================                                                  |  29%   |                                                                               |======================                                                |  32%   |                                                                               |========================                                              |  34%   |                                                                               |==========================                                            |  37%   |                                                                               |===========================                                           |  39%   |                                                                               |=============================                                         |  41%   |                                                                               |===============================                                       |  44%   |                                                                               |================================                                      |  46%   |                                                                               |==================================                                    |  49%   |                                                                               |====================================                                  |  51%   |                                                                               |======================================                                |  54%   |                                                                               |=======================================                               |  56%   |                                                                               |=========================================                             |  59%   |                                                                               |===========================================                           |  61%   |                                                                               |============================================                          |  63%   |                                                                               |==============================================                        |  66%   |                                                                               |================================================                      |  68%   |                                                                               |==================================================                    |  71%   |                                                                               |===================================================                   |  73%   |                                                                               |=====================================================                 |  76%   |                                                                               |=======================================================               |  78%   |                                                                               |========================================================              |  80%   |                                                                               |==========================================================            |  83%   |                                                                               |============================================================          |  85%   |                                                                               |=============================================================         |  88%   |                                                                               |===============================================================       |  90%   |                                                                               |=================================================================     |  93%   |                                                                               |===================================================================   |  95%   |                                                                               |====================================================================  |  98%   |                                                                               |======================================================================| 100% qmap(dt, color = ldist) + scale_color_viridis_c()   # No premade shapefiles for datasets covering the entire globe data.frame(lon = -20:20, lat = seq(-90, 90, length.out = 41)) #>    lon   lat #> 1  -20 -90.0 #> 2  -19 -85.5 #> 3  -18 -81.0 #> 4  -17 -76.5 #> 5  -16 -72.0 #> 6  -15 -67.5 #> 7  -14 -63.0 #> 8  -13 -58.5 #> 9  -12 -54.0 #> 10 -11 -49.5 #> 11 -10 -45.0 #> 12  -9 -40.5 #> 13  -8 -36.0 #> 14  -7 -31.5 #> 15  -6 -27.0 #> 16  -5 -22.5 #> 17  -4 -18.0 #> 18  -3 -13.5 #> 19  -2  -9.0 #> 20  -1  -4.5 #> 21   0   0.0 #> 22   1   4.5 #> 23   2   9.0 #> 24   3  13.5 #> 25   4  18.0 #> 26   5  22.5 #> 27   6  27.0 #> 28   7  31.5 #> 29   8  36.0 #> 30   9  40.5 #> 31  10  45.0 #> 32  11  49.5 #> 33  12  54.0 #> 34  13  58.5 #> 35  14  63.0 #> 36  15  67.5 #> 37  16  72.0 #> 38  17  76.5 #> 39  18  81.0 #> 40  19  85.5 #> 41  20  90.0 dist2land(dt, cores = 1) # wrong! #> Used lon and lat as input coordinate column names in data #> Using ArcticStereographic as land shapes. #> Calculating distances without parallel processing... #>    |                                                                               |                                                                      |   0%   |                                                                               |==                                                                    |   2%   |                                                                               |===                                                                   |   5%   |                                                                               |=====                                                                 |   7%   |                                                                               |=======                                                               |  10%   |                                                                               |=========                                                             |  12%   |                                                                               |==========                                                            |  15%   |                                                                               |============                                                          |  17%   |                                                                               |==============                                                        |  20%   |                                                                               |===============                                                       |  22%   |                                                                               |=================                                                     |  24%   |                                                                               |===================                                                   |  27%   |                                                                               |====================                                                  |  29%   |                                                                               |======================                                                |  32%   |                                                                               |========================                                              |  34%   |                                                                               |==========================                                            |  37%   |                                                                               |===========================                                           |  39%   |                                                                               |=============================                                         |  41%   |                                                                               |===============================                                       |  44%   |                                                                               |================================                                      |  46%   |                                                                               |==================================                                    |  49%   |                                                                               |====================================                                  |  51%   |                                                                               |======================================                                |  54%   |                                                                               |=======================================                               |  56%   |                                                                               |=========================================                             |  59%   |                                                                               |===========================================                           |  61%   |                                                                               |============================================                          |  63%   |                                                                               |==============================================                        |  66%   |                                                                               |================================================                      |  68%   |                                                                               |==================================================                    |  71%   |                                                                               |===================================================                   |  73%   |                                                                               |=====================================================                 |  76%   |                                                                               |=======================================================               |  78%   |                                                                               |========================================================              |  80%   |                                                                               |==========================================================            |  83%   |                                                                               |============================================================          |  85%   |                                                                               |=============================================================         |  88%   |                                                                               |===============================================================       |  90%   |                                                                               |=================================================================     |  93%   |                                                                               |===================================================================   |  95%   |                                                                               |====================================================================  |  98%   |                                                                               |======================================================================| 100% #>      lon lat      ldist #> 1  -20.0  50 770.653793 #> 2  -17.5  51 547.038461 #> 3  -15.0  52 337.546117 #> 4  -12.5  53 174.874918 #> 5  -10.0  54   0.000000 #> 6   -7.5  55   0.000000 #> 7   -5.0  56   0.000000 #> 8   -2.5  57   0.000000 #> 9    0.0  58 123.247176 #> 10   2.5  59 145.587650 #> 11   5.0  60   5.751504 #> 12   7.5  61   0.000000 #> 13  10.0  62   0.000000 #> 14  12.5  63   0.000000 #> 15  15.0  64   0.000000 #> 16  17.5  65   0.000000 #> 17  20.0  66   0.000000 #> 18  22.5  67   0.000000 #> 19  25.0  68   0.000000 #> 20  27.5  69   0.000000 #> 21  30.0  70   8.824472 #> 22  32.5  71  83.978197 #> 23  35.0  72 225.411819 #> 24  37.5  73 361.077663 #> 25  40.0  74 416.021609 #> 26  42.5  75 356.138534 #> 27  45.0  76 310.787422 #> 28  47.5  77 298.118849 #> 29  50.0  78 212.189395 #> 30  52.5  79 102.691377 #> 31  55.0  80  17.593847 #> 32  57.5  81   0.000000 #> 33  60.0  82  19.565938 #> 34  62.5  83 133.132551 #> 35  65.0  84 245.801555 #> 36  67.5  85 356.787751 #> 37  70.0  86 466.059650 #> 38  72.5  87 573.612536 #> 39  75.0  88 679.448918 #> 40  77.5  89 736.611243 #> 41  80.0  90 692.354149 # } if (FALSE) { dt <- data.frame(lon = seq(-179, 179, length.out = 1000), lat = rep(60, 1000)) # The distance calculation is slow for large datasets system.time(dist2land(dt)) #> user  system elapsed #> 0.073   0.041   5.627  # The parallel processing speeds it up system.time(dist2land(dt, cores = 1)) #> user  system elapsed #> 19.719   1.237  20.894  # binary = TRUE further speeds the function up system.time(dist2land(dt, binary = TRUE)) #> user  system elapsed #> 1.624   0.041   1.680 }"},{"path":"/reference/geonorge_bathymetry.html","id":null,"dir":"Reference","previous_headings":"","what":"Open Geonorge bathymetry shapefiles — geonorge_bathymetry","title":"Open Geonorge bathymetry shapefiles — geonorge_bathymetry","text":"Opens formats Geonorge bathymetry shapefiles ready plotting ggOceanMaps","code":""},{"path":"/reference/geonorge_bathymetry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open Geonorge bathymetry shapefiles — geonorge_bathymetry","text":"","code":"geonorge_bathymetry(filepath, layer = NULL, verbose = FALSE, output.sf = FALSE)"},{"path":"/reference/geonorge_bathymetry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open Geonorge bathymetry shapefiles — geonorge_bathymetry","text":"filepath Character string defining path .gml file. Must contain file extension. layer Character string defining layer containing depth information. NULL assumed \"dybdeareal\". verbose Logical indicating whether information reading process returned. output.sf Logical indicating whether sf (TRUE) sp polygon returned.","code":""},{"path":"/reference/geonorge_bathymetry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open Geonorge bathymetry shapefiles — geonorge_bathymetry","text":"sf sp object containing depth polygons. Uses projection bathy (see CRS).","code":""},{"path":"/reference/geonorge_bathymetry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open Geonorge bathymetry shapefiles — geonorge_bathymetry","text":"can download bathymetry polygon shapefiles Geonorge. Download file GLM format.","code":""},{"path":[]},{"path":"/reference/geonorge_bathymetry.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Open Geonorge bathymetry shapefiles — geonorge_bathymetry","text":"Mikko Vihtakari","code":""},{"path":"/reference/getCores.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick a suitable number of cores — getCores","title":"Pick a suitable number of cores — getCores","text":"Picks maximum four cores parallel processing","code":""},{"path":"/reference/getCores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick a suitable number of cores — getCores","text":"","code":"getCores()"},{"path":"/reference/getCores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pick a suitable number of cores — getCores","text":"Integer suitable number cores","code":""},{"path":"/reference/getCores.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pick a suitable number of cores — getCores","text":"StoXProject","code":""},{"path":"/reference/ggOceanMaps-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Data on Oceanographic Maps using ggplot2 — ggOceanMaps-package","title":"Plot Data on Oceanographic Maps using ggplot2 — ggOceanMaps-package","text":"Uses ggplot2 syntax shape files plot research data  oceanographic maps anywhere around globe.","code":""},{"path":"/reference/ggOceanMaps-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Data on Oceanographic Maps using ggplot2 — ggOceanMaps-package","text":"general map-making function ggOceanMaps basemap. function creates \"canvas\" research data can plotted. basemap function analogous  ggplot function ggplot2 package.  Remember use data = <<NAMEOFDATASET>> additional geometries plot basemaps (basemap(60) + geom_point(data =  data.frame(lon = 50, lat = 70), aes(x = lon, y = lat)) example). shortcut, may also use qmap(data.frame(lon = c(10, 50), lat = c(60, 70))). Bathymetry plotted using bathymetry argument.","code":""},{"path":[]},{"path":"/reference/ggOceanMaps-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Data on Oceanographic Maps using ggplot2 — ggOceanMaps-package","text":"Maintainer: Mikko Vihtakari mikko.vihtakari@hi.(ORCID) (Institute Marine Research) contributors: Yves Reecht (ORCID) (Institute Marine Research) [contributor] Hadley Wickham [contributor] Simon O'Hanlon [contributor] Roger Bivand [contributor]","code":""},{"path":"/reference/guess_coordinate_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess longitude and latitude columns in a data frame — guess_coordinate_columns","title":"Guess longitude and latitude columns in a data frame — guess_coordinate_columns","text":"internal function make basemap code readable","code":""},{"path":"/reference/guess_coordinate_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess longitude and latitude columns in a data frame — guess_coordinate_columns","text":"","code":"guess_coordinate_columns(data, lon = NULL, lat = NULL)"},{"path":"/reference/guess_coordinate_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess longitude and latitude columns in a data frame — guess_coordinate_columns","text":"data Dataframe containing data limits calculated. lon, lat Character defining name longitude latitude columns data. Use NULL guess longitude /latitude columns x.","code":""},{"path":"/reference/guess_coordinate_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess longitude and latitude columns in a data frame — guess_coordinate_columns","text":"named vector colummn names.","code":""},{"path":"/reference/guess_coordinate_columns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Guess longitude and latitude columns in a data frame — guess_coordinate_columns","text":"internal function, automatically run basemap function.","code":""},{"path":[]},{"path":"/reference/guess_coordinate_columns.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Guess longitude and latitude columns in a data frame — guess_coordinate_columns","text":"Mikko Vihtakari","code":""},{"path":"/reference/is_decimal_limit.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether a limit argument is specified as decimal degrees. — is_decimal_limit","title":"Test whether a limit argument is specified as decimal degrees. — is_decimal_limit","text":"internal function make basemap code readable","code":""},{"path":"/reference/is_decimal_limit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether a limit argument is specified as decimal degrees. — is_decimal_limit","text":"","code":"is_decimal_limit(limits)"},{"path":"/reference/is_decimal_limit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether a limit argument is specified as decimal degrees. — is_decimal_limit","text":"limits numeric vector length 1 4. See basemap","code":""},{"path":"/reference/is_decimal_limit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test whether a limit argument is specified as decimal degrees. — is_decimal_limit","text":"logical value","code":""},{"path":"/reference/is_decimal_limit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test whether a limit argument is specified as decimal degrees. — is_decimal_limit","text":"internal function, automatically run basemap function.","code":""},{"path":[]},{"path":"/reference/is_decimal_limit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Test whether a limit argument is specified as decimal degrees. — is_decimal_limit","text":"Mikko Vihtakari","code":""},{"path":"/reference/load_map_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load large shapefile objects — load_map_data","title":"Load large shapefile objects — load_map_data","text":"Internal function load large shapefile objects. Downloads files found getOption(\"ggOceanMaps.datapath\")","code":""},{"path":"/reference/load_map_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load large shapefile objects — load_map_data","text":"","code":"load_map_data(x, force = FALSE)"},{"path":"/reference/load_map_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load large shapefile objects — load_map_data","text":"x object shapefile_list. force Logical indicating whether download file even though exists. Useful files Github repository changed. Overwrites old file.","code":""},{"path":"/reference/load_map_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load large shapefile objects — load_map_data","text":"list SpatialPolygonsDataFrames","code":""},{"path":"/reference/load_map_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load large shapefile objects — load_map_data","text":"internal function, automatically run basemap function. Common users need worry details.","code":""},{"path":[]},{"path":"/reference/load_map_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load large shapefile objects — load_map_data","text":"Mikko Vihtakari","code":""},{"path":"/reference/map_cmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Return map elements for basemap — map_cmd","title":"Return map elements for basemap — map_cmd","text":"internal function make basemap code readable","code":""},{"path":"/reference/map_cmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return map elements for basemap — map_cmd","text":"","code":"map_cmd(command, alternative = FALSE)"},{"path":"/reference/map_cmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return map elements for basemap — map_cmd","text":"command basemap layer added alternative logical return alternative formmatting certain cases. Used reduce -else statements basemap.","code":""},{"path":"/reference/map_cmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return map elements for basemap — map_cmd","text":"character string containing ggplot2 plotting command. Use eval(parse(text=...)) plot string.","code":""},{"path":"/reference/map_cmd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return map elements for basemap — map_cmd","text":"internal function, automatically run basemap function. Common users need worry details. Basemap elements can added together using function, parse eval.","code":""},{"path":[]},{"path":"/reference/map_cmd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return map elements for basemap — map_cmd","text":"Mikko Vihtakari","code":""},{"path":"/reference/map_cmd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return map elements for basemap — map_cmd","text":"","code":"## An example for utm map without glaciers or bathymetry if (FALSE) eval(parse(text=paste(map_cmd(\"base\"), map_cmd(\"land_utm\"), map_cmd(\"grid_utm\"), map_cmd(\"defs_utm\"), sep = \"+\")))"},{"path":"/reference/qmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick map — qmap","title":"Quick map — qmap","text":"qmap shortcut similar ggplot2's qplot designed quickly plot data limited range options.","code":""},{"path":"/reference/qmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick map — qmap","text":"","code":"qmap(   data,   x = NULL,   y = NULL,   geom = \"point\",   limits = NULL,   shapefiles = NULL,   bathymetry = FALSE,   glaciers = FALSE,   rotate = FALSE,   legends = TRUE,   legend.position = \"right\",   lon.interval = NULL,   lat.interval = NULL,   bathy.style = \"poly_blues\",   bathy.border.col = NA,   bathy.size = 0.1,   land.col = \"grey60\",   land.border.col = \"black\",   land.size = 0.1,   gla.col = \"grey95\",   gla.border.col = \"black\",   gla.size = 0.1,   grid.col = \"grey70\",   grid.size = 0.1,   base_size = 11,   projection.grid = FALSE,   expand.factor = 1.1,   verbose = FALSE,   ... )"},{"path":"/reference/qmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick map — qmap","text":"data Data frame use. x, y, ... Aesthetics passed layer. Longitude latitude columns automatically recognized using guess_coordinate_columns function. geom Character argument specifying geom(s) draw. Defaults \"point\". alternatives \"text\" \"label\". \"text\" option can also triggered simply mapping variable label (see Examples). limits Map limits. One following: numeric vector length 4: first element defines start longitude, second element end longitude (counter-clockwise), third element minimum latitude fourth element maximum latitude bounding box. coordinates can given decimal degrees coordinate units shapefiles used projected map. Produces rectangular map. Latitude limits given min-max order automatically ordered respect requirement. single integer 30 88 -88 -30 produces polar map Arctic Antarctic, respectively. Can omitted data shapefiles defined. shapefiles Either list containing shapefile information character argument referring name pre-made shapefiles shapefile_list. name partially matched. Can omitted limits data defined decimal degrees. bathymetry Logical indicating whether bathymetry added map. glaciers Logical indicating whether glaciers ice-sheets added map. rotate Logical indicating whether projected maps rotated point towards pole relative mid-longitude limit. Experimental. legends Logical indicating whether legend bathymetry shown. legend.position position ggplot2 legend. See argument name theme. lon.interval, lat.interval Numeric value specifying interval longitude latitude grids. NULL finds reasonable defaults depending limits. bathy.style Character defining style bathymetry contours. Alternatives: \"poly_blues\" plots polygons filled different shades blue. \"poly_greys\" plots polygons filled different shades gray. \"contour_blues\" contour lines different shades blue. \"contour_grey\" plots gray contour lines. land.col, gla.col, grid.col Character code specifying color land, glaciers grid lines, respectively. Use NA remove grid lines. land.border.col, gla.border.col, bathy.border.col Character code specifying color border line land, glacier, bathymetry shapes. land.size, gla.size, bathy.size, grid.size Numeric value specifying width border line land, glacier bathymetry shapes well grid lines, respectively. Use LS function specific width pt. See Details. base_size Base size parameter ggplot. See ggtheme. projection.grid Logical indicating whether coordinate grid show projected coordinates instead decimal degree values. Useful define limits large maps polar regions. expand.factor Expansion factor map limits data argument. Can used zoom automatically limited maps. Defaults 1.1. Set NULL ignore. verbose Logical indicating whether information projection guessed column names returned message. Set FALSE make function silent.","code":""},{"path":"/reference/qmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick map — qmap","text":"Returns ggplot map, can assigned object modified ggplot object.","code":""},{"path":[]},{"path":"/reference/qmap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quick map — qmap","text":"Mikko Vihtakari","code":""},{"path":"/reference/qmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick map — qmap","text":"","code":"dt <- data.frame(lon = c(-100, -80, -60), lat = c(10, 25, 40), var = c(\"a\", \"a\", \"b\"))  # Set color  if(requireNamespace(\"ggOceanMapsData\")) { qmap(dt, color = I(\"red\"))  }   # Map color # \\donttest{ qmap(dt, color = var)   # }  # Map text # \\donttest{ qmap(dt, label = var)   # }   # All basemap arguments work in qmap()  dt <- data.frame(lon = c(-80, -80, -50, -50), lat = c(65, 80, 80, 65))   # \\donttest{ qmap(dt, rotate = TRUE)  # }"},{"path":"/reference/quiet.html","id":null,"dir":"Reference","previous_headings":"","what":"Return function output quietly — quiet","title":"Return function output quietly — quiet","text":"Returns function output without printed cat messages","code":""},{"path":"/reference/quiet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return function output quietly — quiet","text":"","code":"quiet(x)"},{"path":"/reference/quiet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return function output quietly — quiet","text":"x function","code":""},{"path":"/reference/quiet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return function output quietly — quiet","text":"Output x","code":""},{"path":"/reference/quiet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return function output quietly — quiet","text":"Hadley Wickham","code":""},{"path":"/reference/raster_bathymetry.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify a bathymetry raster ready for vectorization — raster_bathymetry","title":"Simplify a bathymetry raster ready for vectorization — raster_bathymetry","text":"Simplifies bathymetry raster ready vector_bathymetry function. Warning: processing may take long time bathymetry raster large.","code":""},{"path":"/reference/raster_bathymetry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify a bathymetry raster ready for vectorization — raster_bathymetry","text":"","code":"raster_bathymetry(   bathy,   depths,   proj.out = NULL,   proj.bathy,   boundary = NULL,   file.name = NULL,   aggregation.factor = NA,   verbose = TRUE )"},{"path":"/reference/raster_bathymetry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplify a bathymetry raster ready for vectorization — raster_bathymetry","text":"bathy raster object string giving path bathymetry NetCDF grd file depths Numeric vector giving cut points depth contours (see cut). proj.character string specifying PROJ6 projection argument output. See st_crs proj.org. NULL, projection retrieved bathy. proj.== proj.bathy, output reprojected. proj.bathy character string specifying CRS projection arguments input (bathy). required bathy lacks CRS information. missing, \"EPSG:4326\" assumed. boundary st_polygon object, text string defining file path spatial polygon, numeric vector length 4 giving boundaries bathy cut . given decimal degrees. numeric vector, first element defines minimum longitude, second element maximum longitude, third element minimum latitude fourth element maximum latitude bounding box. Use NULL cut bathy. file.name character string specifying file path without extension output saved. NULL temporary file used. See writeRaster. aggregation.factor integer defining fact argument aggregate function. Set NA ignore aggregation. verbose Logical indicating whether information guessed projection returned message. Set FALSE make function silent.","code":""},{"path":"/reference/raster_bathymetry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplify a bathymetry raster ready for vectorization — raster_bathymetry","text":"list raster object containing projected bathymetry defined proj.argument data frame depth intervals.","code":""},{"path":"/reference/raster_bathymetry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simplify a bathymetry raster ready for vectorization — raster_bathymetry","text":"can use GEBCO, IBCAO, ETOPO1 bathymetry grids downloaded respective sources bathy argument. bathymetry grids read files must NetCDF/grd format. Alternatively use marmap::getNOAA.bathy function download ETOPO1 bathymetry convert raster object using marmap::.raster function. Note size output heavily influenced number depth contours (depths) well resolution bathy choice aggregation.factor. make vector_bathymetry function consequent plotting faster, limiting details bathymetry raster may desirable.","code":""},{"path":"/reference/raster_bathymetry.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simplify a bathymetry raster ready for vectorization — raster_bathymetry","text":"GEBCO Compilation Group (2019) GEBCO 2019 15-arcsecond grid (doi:10.5285/836f016a-33be-6ddc-e053-6c86abc0788e). URL: https://www.gebco.net/data_and_products/gridded_bathymetry_data/gebco_2019/gebco_2019_info.html. ETOPO1 1 Arc-Minute Global Relief Model. URL: https://www.ngdc.noaa.gov/mgg/global/relief/ETOPO1/docs/ETOPO1.pdf.","code":""},{"path":[]},{"path":"/reference/raster_bathymetry.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simplify a bathymetry raster ready for vectorization — raster_bathymetry","text":"Mikko Vihtakari","code":""},{"path":"/reference/reorder_layers.html","id":null,"dir":"Reference","previous_headings":"","what":"Move basemap land, glacier and grid layers on top of other ggplot layers — reorder_layers","title":"Move basemap land, glacier and grid layers on top of other ggplot layers — reorder_layers","text":"Moves existing land, glacier grid layers top layers. Useful hiding region polygons land.","code":""},{"path":"/reference/reorder_layers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move basemap land, glacier and grid layers on top of other ggplot layers — reorder_layers","text":"","code":"reorder_layers(p)"},{"path":"/reference/reorder_layers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move basemap land, glacier and grid layers on top of other ggplot layers — reorder_layers","text":"p ggplot object basemap function.","code":""},{"path":"/reference/reorder_layers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move basemap land, glacier and grid layers on top of other ggplot layers — reorder_layers","text":"Returns ggplot object land, glacier grid layers top.","code":""},{"path":"/reference/reorder_layers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Move basemap land, glacier and grid layers on top of other ggplot layers — reorder_layers","text":"function tested properly yet likely contain bugs.","code":""},{"path":[]},{"path":"/reference/reorder_layers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Move basemap land, glacier and grid layers on top of other ggplot layers — reorder_layers","text":"Mikko Vihtakari","code":""},{"path":"/reference/reorder_layers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move basemap land, glacier and grid layers on top of other ggplot layers — reorder_layers","text":"","code":"# \\donttest{  data(\"ices_areas\", package = \"ggOceanMapsData\")  p <- basemap(c(-20, 15, 50, 70)) +     annotation_spatial(ices_areas, aes(fill = Area_Full), show.legend = FALSE)    # Polygons on top of land  p     # Move land on top  reorder_layers(p)   # }"},{"path":"/reference/round_any.html","id":null,"dir":"Reference","previous_headings":"","what":"Round to multiple of any number — round_any","title":"Round to multiple of any number — round_any","text":"Round multiple number","code":""},{"path":"/reference/round_any.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round to multiple of any number — round_any","text":"","code":"round_any(x, accuracy, f = round)"},{"path":"/reference/round_any.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round to multiple of any number — round_any","text":"x numeric vector round accuracy number round ; POSIXct objects, number seconds f rounding function: floor, ceiling round","code":""},{"path":"/reference/round_any.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round to multiple of any number — round_any","text":"Rounded numeric vector","code":""},{"path":"/reference/round_any.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Round to multiple of any number — round_any","text":"Hadley Wickham","code":""},{"path":"/reference/select_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Select an element of each vector from a list — select_element","title":"Select an element of each vector from a list — select_element","text":"Selects y'th element vector list","code":""},{"path":"/reference/select_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select an element of each vector from a list — select_element","text":"","code":"select_element(x, y)"},{"path":"/reference/select_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select an element of each vector from a list — select_element","text":"x list y number element. Must integer","code":""},{"path":"/reference/select_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select an element of each vector from a list — select_element","text":"selected element list","code":""},{"path":"/reference/shapefile_list.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of pre-made shapefiles for basemap — shapefile_list","title":"A list of pre-made shapefiles for basemap — shapefile_list","text":"Lists available pre-made shapefiles plotting basemap function. Gives also instructions make custom ones.","code":""},{"path":"/reference/shapefile_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list of pre-made shapefiles for basemap — shapefile_list","text":"","code":"shapefile_list(name, get.data = FALSE)"},{"path":"/reference/shapefile_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A list of pre-made shapefiles for basemap — shapefile_list","text":"name character argument giving name pre-made shapefile. partially matched. Use \"\" list available ones. get.data Logical indicating whether spatial data returned instead names spatial data objects.","code":""},{"path":"/reference/shapefile_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A list of pre-made shapefiles for basemap — shapefile_list","text":"Returns data frame provided pre-made shapefiles, name = \"\". Returns shapefile list containing information particular map otherwise.","code":""},{"path":"/reference/shapefile_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A list of pre-made shapefiles for basemap — shapefile_list","text":"Custom shapefiles basemap defined lists (least) following names (everything provided characters): land Object name SpatialPolygonsDataFrame containing land. Required. glacier Object name SpatialPolygonsDataFrame containing glaciers. Use NULL glaciers needed. bathy Object name SpatialPolygonsDataFrame containing bathymetry contours. Use NULL bathymetry needed. linked spatial data objects must projection. Pre-made shapefiles contain additional elements used basemap function, required custom shapefile datasets.","code":""},{"path":[]},{"path":"/reference/shapefile_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A list of pre-made shapefiles for basemap — shapefile_list","text":"Mikko Vihtakari","code":""},{"path":"/reference/shapefile_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A list of pre-made shapefiles for basemap — shapefile_list","text":"","code":"shapefile_list(\"all\") #>                     name                            land #> 1    ArcticStereographic    ggOceanMapsData::arctic_land #> 2 AntarcticStereographic ggOceanMapsData::antarctic_land #> 3          DecimalDegree        ggOceanMapsData::dd_land #> 4               Svalbard                   svalbard_land #> 5             BarentsSea                 barentssea_land #> 6                  IBCAO    ggOceanMapsData::arctic_land #>                              glacier                            bathy   crs #> 1    ggOceanMapsData::arctic_glacier    ggOceanMapsData::arctic_bathy  3995 #> 2 ggOceanMapsData::antarctic_glacier ggOceanMapsData::antarctic_bathy  3031 #> 3        ggOceanMapsData::dd_glacier        ggOceanMapsData::dd_bathy  4326 #> 4                   svalbard_glacier                   svalbard_bathy 32633 #> 5                 barentssea_glacier                 barentssea_bathy 32636 #> 6    ggOceanMapsData::arctic_glacier                      ibcao_bathy  3995 #>                                                                                     path #> 1                                                                                   <NA> #> 2                                                                                   <NA> #> 3                                                                                   <NA> #> 4    https://github.com/MikkoVihtakari/ggOceanMapsLargeData/raw/master/data/svalbard.rda #> 5  https://github.com/MikkoVihtakari/ggOceanMapsLargeData/raw/master/data/barentssea.rda #> 6 https://github.com/MikkoVihtakari/ggOceanMapsLargeData/raw/master/data/ibcao_bathy.rda shapefile_list(\"Arctic\") # partial matching #> $name #> [1] \"ArcticStereographic\" #>  #> $land #> [1] \"ggOceanMapsData::arctic_land\" #>  #> $glacier #> [1] \"ggOceanMapsData::arctic_glacier\" #>  #> $bathy #> [1] \"ggOceanMapsData::arctic_bathy\" #>  #> $crs #> [1] 3995 #>  #> $path #> [1] NA #>"},{"path":"/reference/theme_map.html","id":null,"dir":"Reference","previous_headings":"","what":"A ggplot2 theme for maps — theme_map","title":"A ggplot2 theme for maps — theme_map","text":"ggplot2 theme maps.","code":""},{"path":"/reference/theme_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A ggplot2 theme for maps — theme_map","text":"","code":"theme_map(..., grid.col, grid.size)"},{"path":"/reference/theme_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A ggplot2 theme for maps — theme_map","text":"... additional arguments passed ggtheme. grid.col Character code specifying color grid lines. Use NA remove grid lines. grid.size Numeric value specifying width grid lines.","code":""},{"path":"/reference/theme_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A ggplot2 theme for maps — theme_map","text":"ggplot2 theme layer.","code":""},{"path":[]},{"path":"/reference/transform_coord.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform spatial coordinates to another projection — transform_coord","title":"Transform spatial coordinates to another projection — transform_coord","text":"Transforms spatial coordinates original projection (decimal degrees assumed) another projection.","code":""},{"path":"/reference/transform_coord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform spatial coordinates to another projection — transform_coord","text":"","code":"transform_coord(   x = NULL,   lon = NULL,   lat = NULL,   new.names = \"auto\",   proj.in = 4326,   proj.out = NULL,   verbose = FALSE,   bind = FALSE,   na = \"ignore\" )"},{"path":"/reference/transform_coord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform spatial coordinates to another projection — transform_coord","text":"x Data frame transformed. Can omitted numeric vectors assigned lon lat. lon, lat Either name longitude latitude columns x numeric vector containing longitude latitude coordinates. Use NULL guess longitude /latitude columns x. new.names Character vector length 2 specifying names transformed longitude latitude columns, respectively. Alternatively NULL, returns column names x \"auto\", uses NULL bind = FALSE c(\"lon.proj\", \"lat.proj\") bind = TRUE. proj.original CRS. NULL, projection taken x. x must spatial object case. proj.Character. Either NULL, CRS coordinates transformed name shapefiles shapefile_list. NULL, output projection automatically determined data. option requires decimal degrees input option. verbose Logical indicating whether information projection returned message. Set FALSE make function silent. bind logical. transformed coordinates returned (FALSE, default) x returned transformed coordinates (TRUE)? na character specifying NA action missing coordinates. \"ignore\" option ignores coordinates returns NAs transformed coordinates. \"remove\" option removes missing values x returning message . character argument trigger na.fail stopping function case missing coordinates.","code":""},{"path":"/reference/transform_coord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform spatial coordinates to another projection — transform_coord","text":"Returns data frame transformed spatial coordinates.","code":""},{"path":"/reference/transform_coord.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform spatial coordinates to another projection — transform_coord","text":"x specified, function guesses longitude latitude columns x default.","code":""},{"path":[]},{"path":"/reference/transform_coord.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transform spatial coordinates to another projection — transform_coord","text":"Mikko Vihtakari","code":""},{"path":"/reference/transform_coord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform spatial coordinates to another projection — transform_coord","text":"","code":"# Coordinates are automatically transformed to the pre-made shapefile # projections: x <- data.frame(lon = c(-150, 150), lat = c(60, 90)) transform_coord(x) #>        lon     lat #> 1 -1666567 2886579 #> 2        0       0 transform_coord(x, bind = TRUE) #>    lon lat lon.proj lat.proj #> 1 -150  60 -1666567  2886579 #> 2  150  90        0        0  x <- data.frame(lon = c(-150, 150), lat = c(20, 50)) transform_coord(x, bind = TRUE) # no transformation required. #>    lon lat lon.proj lat.proj #> 1 -150  20     -150       20 #> 2  150  50      150       50"},{"path":"/reference/vector_bathymetry.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a polygon bathymetry from a raster bathymetry file — vector_bathymetry","title":"Create a polygon bathymetry from a raster bathymetry file — vector_bathymetry","text":"Vectorizes bathymetry rasters. Designed used output raster_bathymetry function. Warning: processing may take long time bathymetry raster large.","code":""},{"path":"/reference/vector_bathymetry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a polygon bathymetry from a raster bathymetry file — vector_bathymetry","text":"","code":"vector_bathymetry(   bathy,   drop.crumbs = NULL,   remove.holes = NULL,   smooth = FALSE,   output.sf = FALSE )"},{"path":"/reference/vector_bathymetry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a polygon bathymetry from a raster bathymetry file — vector_bathymetry","text":"bathy bathyRaster object raster_bathymetry function. drop.crumbs Single numeric value specifying threshold (area km2) disconnected polygons removed. Set NULL bypass removal. Uses drop_crumbs function. remove.holes Single numeric value specifying threshold (area km2) holes removed. Set NULL bypass removal. Uses fill_holes function. smooth Logical indicating whether pixelated contours smoothed. Uses smooth_ksmooth function. output.sf Logical indicating whether sf (TRUE) sp (FALSE) polygon returned.","code":""},{"path":"/reference/vector_bathymetry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a polygon bathymetry from a raster bathymetry file — vector_bathymetry","text":"sf sp object containing depth polygons. Uses projection bathy (see CRS).","code":""},{"path":"/reference/vector_bathymetry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a polygon bathymetry from a raster bathymetry file — vector_bathymetry","text":"drop.crumbs remove.holes arguments can used make resulting object smaller file size. smooth argument can used remove pixelated contours, often increases file size. Note also using option bias contours respect real world.","code":""},{"path":[]},{"path":"/reference/vector_bathymetry.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a polygon bathymetry from a raster bathymetry file — vector_bathymetry","text":"Mikko Vihtakari","code":""},{"path":[]},{"path":"/news/index.html","id":"ggoceanmaps-13","dir":"Changelog","previous_headings":"","what":"ggOceanMaps 1.3","title":"ggOceanMaps 1.3","text":"Many bug fixes Removed many CRS warning sp rgdal Added way control plotting order graticules Add transparency (alpha) scaling bathymetry fill Add GEBCO bathymetry detailed ArcticSterographic Improve vignette webpage. Add way control plotting order graticules. Upgraded webpage. Added ICES areas.","code":""},{"path":"/news/index.html","id":"ggoceanmaps-12","dir":"Changelog","previous_headings":"","what":"ggOceanMaps 1.2","title":"ggOceanMaps 1.2","text":"added x argument basemap() qmap() Conversion PROJ4 PROJ6. change make old ggOceanMapsData files incompatible ggOceanMaps 1.2 vice versa. Changed functions. Added NEWS.md Improved premade_shapefiles shapefile documentation. Started rewriting package sp, rgeos rgdal sf. Moved rgdal package Imports Suggests. Added geonorge_bathymetry() Added possiblity adjust data limits using expand.factor parameter basemap() qmap() Improved user manual website. Fixed issue decimal degree input rasters raster_bathymetry() Fixed issue ggplot2 (>=3.3.4)","code":""},{"path":"/news/index.html","id":"ggoceanmaps-11","dir":"Changelog","previous_headings":"","what":"ggOceanMaps 1.1","title":"ggOceanMaps 1.1","text":"CRAN release: 2021-05-21 Generally bug fixes. Started replacing PROJ4 system PROJ6 wkt based system replacing “+init=epsg:NNNN” strings “EPSG:NNNN”. finish conversion.","code":""},{"path":"/news/index.html","id":"ggoceanmaps-109","dir":"Changelog","previous_headings":"","what":"ggOceanMaps 1.0.9","title":"ggOceanMaps 1.0.9","text":"CRAN release: 2021-01-14 First CRAN release. Contains core package code rewritten PlotSvalbard","code":""}]
